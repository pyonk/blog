<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on わいがかいた</title>
    <link>https://pyonk.github.io/blog/post/</link>
    <description>Recent content in Posts on わいがかいた</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>pyonk</copyright>
    <lastBuildDate>Mon, 17 Oct 2016 10:38:19 +0900</lastBuildDate>
    <atom:link href="https://pyonk.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>hubot-line-message-apiをつくってみてます</title>
      <link>https://pyonk.github.io/blog/post/hubot-line-message-api/</link>
      <pubDate>Mon, 17 Oct 2016 10:38:19 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/hubot-line-message-api/</guid>
      <description>

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/pyonk/hubot-line-message-api&#34;&gt;ここです。&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;使い方&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ git clone https://github.com/pyonk/hubot-line-message-api.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;からの&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json:package.json&#34;&gt;&amp;quot;dependencies&amp;quot;: {
    &amp;quot;bar&amp;quot;: &amp;quot;file:./hubot-line-message-api&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;からの&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ hubot -a line-message-api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;でいけると思います。&lt;/p&gt;

&lt;h1 id=&#34;hubot-line-message-api&#34;&gt;hubot-line-message-api&lt;/h1&gt;

&lt;p&gt;結構ガバガバ実装なので&lt;a href=&#34;https://devdocs.line.me/ja/&#34;&gt;API Reference&lt;/a&gt;をしっかり読んでからやるのをオススメします。&lt;/p&gt;

&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;

&lt;h3 id=&#34;必須&#34;&gt;必須&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;LINE_CHANNEL_ACCESS_TOKEN

&lt;ul&gt;
&lt;li&gt;lineアカウントのBasic Infomationにある&lt;code&gt;Channel Access Token&lt;/code&gt;の値を設定してください。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;任意&#34;&gt;任意&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HUBOT_ENDPOINT

&lt;ul&gt;
&lt;li&gt;defaultで/hubot/incomingになってます。&lt;/li&gt;
&lt;li&gt;自由に設定していただいて大丈夫です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FIXIE_URL

&lt;ul&gt;
&lt;li&gt;herokuで走らす場合は必須かなと思います。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elements.heroku.com/addons/fixie&#34;&gt;Fixie&lt;/a&gt;というアドオンを使います。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ heroku addons:create fixie:tricycle&lt;/code&gt;を叩くと自動で設定されています。&lt;/li&gt;
&lt;li&gt;出力されるIPアドレスを&lt;code&gt;Server IP Whitelist&lt;/code&gt;に設定してあげてください。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;できること&#34;&gt;できること&lt;/h2&gt;

&lt;p&gt;今のところpushで送信は対応できておらず、返信しかできません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;返信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テキスト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://devdocs.line.me/ja/#text&#34;&gt;https://devdocs.line.me/ja/#text&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^テキスト$/, (res) -&amp;gt;
        res.reply
            type: &#39;text&#39;
            contents: [&#39;nyaa&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;画像と動画&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://devdocs.line.me/ja/#image&#34;&gt;https://devdocs.line.me/ja/#image&lt;/a&gt;
&lt;a href=&#34;https://devdocs.line.me/ja/#video&#34;&gt;https://devdocs.line.me/ja/#video&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^画像$/, (res) -&amp;gt;
        res.reply
            type:&#39;image&#39;# &#39;video&#39;
            content: [
                original: &#39;https://example.com/images/image.jpg&#39;
                preview: &#39;https://example.com/images/image.jpg&#39;
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ボタン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://devdocs.line.me/ja/#buttons&#34;&gt;https://devdocs.line.me/ja/#buttons&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^テキスト$/, (res) -&amp;gt;
        res.reply
            type: &#39;buttons&#39;
            altText: &#39;hogehoge&#39;
            contents: [
                image: &#39;https://example.com/images/image.jpg&#39;
                title: &#39;this is Buttons&#39;
                text: &#39;buttons description&#39;
                actions:[
                    type: &#39;uri&#39;
                    label: &#39;Open in Browser&#39;
                    uri: &#39;http://example.com/&#39;
                ]
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;カルーセル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://devdocs.line.me/ja/#carousel&#34;&gt;https://devdocs.line.me/ja/#carousel&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^カルーセル$/, (res) -&amp;gt;
        res.reply
            type: &#39;carousel&#39;
            altText: &#39;hogehoge&#39;
            contents: [
                image: &#39;https://example.com/images/image.jpg&#39;
                title: &#39;this is Buttons&#39;
                text: &#39;buttons description&#39;
                actions:[
                    type: &#39;uri&#39;
                    label: &#39;Open in Browser&#39;
                    uri: &#39;http://example.com/&#39;
                ],
                image: &#39;https://example.com/images/image.jpg&#39;
                title: &#39;this is Buttons&#39;
                text: &#39;buttons description&#39;
                actions:[
                    type: &#39;uri&#39;
                    label: &#39;Open in Browser&#39;
                    uri: &#39;http://example.com/&#39;
                ]...
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;くみあわせ&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^くみあわせ$/, (res) -&amp;gt;
        res.reply {
            type: &#39;text&#39;
            contents: [&#39;nyaa&#39;]
        },
        {
            type: &#39;buttons&#39;
            contents: [
                image: &#39;https://example.com/images/image.jpg&#39;
                title: &#39;this is Buttons&#39;
                text: &#39;buttons description&#39;
                actions: [
                    type: &#39;uri&#39;
                    label: &#39;Open in Browser&#39;
                    uri: &#39;http://example.com/&#39;
                ]
            ]
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;注意点&#34;&gt;注意点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;contents.length &amp;lt;= 5&lt;/code&gt;にしないとLINEに怒られます。

&lt;ul&gt;
&lt;li&gt;くみあわせて使う場合はcontents.lengthを足し算した値が5を超えないようにしないと怒られます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像のURLなどはhttpsでないと怒られます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;所感&#34;&gt;所感&lt;/h1&gt;

&lt;p&gt;hubotつかって新しくlinebot作ろうと思ってたらBOT API TrialからよりリッチなMessaging APIが発表されたらしいので、hubotのアダプター作っちゃえってなって作ってみた。&lt;br&gt;
タイトルにもある通り、まだ&lt;strong&gt;作ってみている&lt;/strong&gt;最中なのでちゃんとnpmにあげられるくらいちゃんと作ってみたい。&lt;br&gt;
とりあえず、最低限はできているような気もするので、公開してみる。&lt;br&gt;&lt;br&gt;
初めてcoffeescriptちゃんと触ったし、hubotのアダプターも初めて作るので探り探りすぎて疲れた^q^&lt;br&gt;&lt;br&gt;
けどたのしい。&lt;br&gt;&lt;br&gt;&lt;br&gt;
後から気づいたけど&lt;code&gt;message-api&lt;/code&gt;でなくて&lt;code&gt;messaging-api&lt;/code&gt;だったね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>javascriptのよくわからない書き方【連想配列編】</title>
      <link>https://pyonk.github.io/blog/post/javascript-unknonwn-writing/</link>
      <pubDate>Tue, 30 Aug 2016 10:48:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/javascript-unknonwn-writing/</guid>
      <description>

&lt;p&gt;react + reduxでのアプリ開発に挑戦している際に、参考にしていたサイト様で、突然よくわからない記法が出てきたのでその備忘録に。&lt;/p&gt;

&lt;h1 id=&#34;連想配列のなにかっぽい&#34;&gt;連想配列のなにかっぽい&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function myfunc(hoge, fuga) {
    var {hogehoge} = hoge;
    var {
        hogeKey: hogeValue,
    } = hogehoge || {
        hogeKey: &#39;&#39;,
    }
    return {
        hogeKey,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記が件のコード。&lt;/p&gt;

&lt;h1 id=&#34;けっか&#34;&gt;けっか&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict1 = {keyA: {key1: 1}};
var dict2 = {keyB: {key1: 2}};
var dict3 = {keyA: {key2: 3}};
var dict4 = {keyC: {key2: 4}};
function myfunc(hoge) {
    var {keyA} = hoge;
    console.log(keyA); //hoge.keyAの値
    console.log({keyA}); //keyAをキーに、keyAに代入されている値をバリューにした連想配列
    var {
        key1: key1,
    } = keyA || {
        key1: &#39;&#39;,
    }
    console.log(key1); //keyAがundefinedであれば空文字、keyAがあれば、keyA.key1の値をkey1に代入する。keyA.key1がなければkey1=undefinedになる。
    return {
        key1, //key1をキーに、key1に代入されている値をバリューにした連想配列
    }
}
myfunc(dict1);
// {key1: 1}
// {keyA: {key1: 1}}
// 1
myfunc(dict2);
// undefined
// {keyA: undefined}
// &#39;&#39;
myfunc(dict3);
// {key2: 3}
// {keyA: {key2: 3}}
// undefined
myfunc(dict4);
// undefined
// {keyA: undefined}
// &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;書いててよくわからなくなってきた。&lt;/p&gt;

&lt;h1 id=&#34;つまり&#34;&gt;つまり&lt;/h1&gt;

&lt;h2 id=&#34;keya-dict&#34;&gt;{keyA}=dict&lt;/h2&gt;

&lt;p&gt;連想配列(dict)のキー(keyA)を変数名にして、そのキーに対応する値(dict.keyA)を代入している。&lt;/p&gt;

&lt;h3 id=&#34;これって&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict = {keyA: &#39;keyAだよ&#39;};
var keyA = dict.keyA;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;h2 id=&#34;key1-key1-dict-key1&#34;&gt;{key1: key1} = dict || {key1: &amp;ldquo;}&lt;/h2&gt;

&lt;p&gt;連想配列(dict)のキー(key1)を変数名にしてそのキーに対応する値(dict.key1)を代入する。ない場合はkey1に初期値(空文字)をしている。&lt;/p&gt;

&lt;h3 id=&#34;これって-1&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict = {key1: &#39;key1だよ&#39;};
var key1 = dict.key1 ? key1: &#39;&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;h2 id=&#34;return-key1&#34;&gt;return {key1}&lt;/h2&gt;

&lt;p&gt;変数(key1)をキーにして、変数(key1)に代入された値をバリューにした連想配列をリターンしている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var key1 = &#39;hogehoge&#39;;
return {key1}; // {key1: &#39;hogehoge&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;これって-2&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var key1 = &#39;key1だよ&#39;;
return {key1: key1};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;という見解であってるんでしょうか・・・。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>最終週のキンプリ応援上映にいってきた</title>
      <link>https://pyonk.github.io/blog/post/kinpri-ouen-jouen/</link>
      <pubDate>Thu, 21 Jul 2016 19:00:00 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/kinpri-ouen-jouen/</guid>
      <description>

&lt;p&gt;来る2016年七夕の日。&lt;br /&gt;
七夕のお祭りを楽しんでいたところ、会社の後輩がわざわざ近所のゲオから借りてきたという&lt;a href=&#34;http://kinpri.com&#34;&gt;KING OF PRISM&lt;/a&gt;が会社で上映されたわけです。&lt;br /&gt;
何の気なしにみていたのですが、笑いが止まらない感じの映画でして、宴どころではなくなりました。&lt;br /&gt;
もうほんとにやばい、世界がかがやいてみえるようになりましたね。&lt;/p&gt;

&lt;p&gt;見終わった後もキンプリの話題で持ちきりで、気になって色々調べてみました。&lt;/p&gt;

&lt;p&gt;プリティーリズム・レインボーライブのOver The Rainbowという男性ユニットに焦点をあてたスピンオフ映画で、2016年1月9日に公開されるやいなや、Twitterでバズりにバズったらしく、がんがんと上映会場が増えていったそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プリズムショーはすごい！&lt;/li&gt;
&lt;li&gt;トチ狂ってる&lt;/li&gt;
&lt;li&gt;お尻から蜂蜜が出た&lt;/li&gt;
&lt;li&gt;無限ハグに抱かれたい&lt;/li&gt;
&lt;li&gt;電車にのってハリウッド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だの&lt;br /&gt;
いろいろな感想が飛び交うなか心惹かれたのが&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;応援上演はいいぞ！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;って&lt;strong&gt;応援上映&lt;/strong&gt;ってなんやねん。&lt;/p&gt;

&lt;h1 id=&#34;ということで応援上映いってきた&#34;&gt;ということで応援上映いってきた&lt;/h1&gt;

&lt;p&gt;近場ではみなとみらいでやってるらしく、しかも4dxというなにやらすごい設備のところで応援するらしい。&lt;br /&gt;
これは行くしかないっということで、この前行ってきました。&lt;br /&gt;
会社の有志たちでいったのですが、うち男性は僕一人。&lt;br /&gt;
事前情報から仕入れていたサイリウムはキチンと100均で買ってはいたのですが、会場につくと、まわりはルェ〜〜〜ヴェルが違うようで、七色にひかるサイリウムやら、棒状ではない光るなにかなど、余計に肩身が狭くなりました。&lt;br /&gt;
ただそんなかんじでも、上映がはじまってからはそんなのおかまいなしで、我を忘れて応援してしまってたんだからほんとに、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;プリズムショーはすごい&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;やはり女性がおおかった&#34;&gt;やはり女性がおおかった&lt;/h2&gt;

&lt;p&gt;平日の夜だからそんなに観客も多くなくて、全部で20人ちょっとくらいかなという感じ。&lt;br /&gt;
最初から分かってはいたのだけど、女性が8割くらいでした。&lt;br /&gt;
それよりも2割くらい男性がいて（自分含む）本当にびっくりしました。&lt;br /&gt;
最悪男性一人っていうのも覚悟していたのだけど、ちょっぴり心強かったですね。&lt;/p&gt;

&lt;h2 id=&#34;コマーシャルのときもすごい&#34;&gt;コマーシャルのときもすごい&lt;/h2&gt;

&lt;p&gt;映画の前ってCMがながれるじゃないですか。&lt;br /&gt;
あのときから、いろいろ突っ込みを入れる感じの声がとびかってて、きわめつけはスポンサーのこれ。&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/avex-min.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;avex&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;br /&gt;
&lt;strong&gt;\えいべっくすーーーーーーっ！！！/&lt;/strong&gt;&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/takara-t-a-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;TAKARA TOMY ARTS&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;br /&gt;
&lt;strong&gt;\たからとみーあーつーーーっ！！/&lt;/strong&gt;&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/tatsunoko-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;タツノコプロ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;br /&gt;
&lt;strong&gt;\タツノコプローーーっ！！ありがとーーーーーー！！！！/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;もうなんやねんおまえら、すごすぎるわ。&lt;br /&gt;
これがキンプリエリートかって再認識しました。&lt;/p&gt;

&lt;h2 id=&#34;始まってからももちろんすごい&#34;&gt;始まってからももちろんすごい&lt;/h2&gt;

&lt;p&gt;登場人物がしょっぱなから全裸だし、それにあわせて&lt;br /&gt;
&lt;strong&gt;\あ〜〜りがとうございま〜す！/&lt;/strong&gt;&lt;br /&gt;
ってより一層大きな声が響きました。&lt;br /&gt;
ここは居酒屋か！！&lt;/p&gt;

&lt;p&gt;ほかにも、尻から蜂蜜出すのに合わせて&lt;br /&gt;
&lt;strong&gt;\たべた〜〜〜い/&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;\甘い！！！/&lt;/strong&gt;&lt;br /&gt;
だの、自分が思っていることをおのおの気にせず叫んでいます。&lt;br /&gt;
4dxだったので、ここで蜂蜜の匂いが微妙にしたような気もしましたが、はっきりいって、周りに圧倒されすぎてて覚えていません。&lt;/p&gt;

&lt;p&gt;作成側も意図して&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/a-n-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;あ〜ん♡&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

こんなシーンも用意していただく徹底っぷり。&lt;br /&gt;
もちろんみんなで&lt;br /&gt;
&lt;strong&gt;\あ〜〜〜〜〜ん！！/&lt;/strong&gt;&lt;br /&gt;
ですよね。&lt;br /&gt;
なかには&lt;strong&gt;前見てっ！！！&lt;/strong&gt;なんていう優しい方もいらっしゃいましたよ。&lt;/p&gt;

&lt;p&gt;個人的におもしろかったのが、学園（キンプリの人らは学校に所属してアイドル活動をおこなっている）の理事長、氷室聖。&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/himuro-min.png&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;仕事して！&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;br /&gt;
なんともこのお方は経営がヘッタクソなのか、運が悪かっただけなのか、借金が&lt;strong&gt;100億円以上&lt;/strong&gt;あるんですね。&lt;br /&gt;
だいたいこの人が登場してくると、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;\仕事してっ！！！！/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;という厳しいお声がかかります。&lt;br /&gt;
２回目以降は僕も一緒になって応援しましたよ。&lt;/p&gt;

&lt;p&gt;ちなみに、&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/kakeru-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カズオじゃないって&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;br /&gt;
この十王院-カズオ-カケルくん。総資産は200兆円を超えます。&lt;br /&gt;
すこしでも払っていただけると理事長も救われるのだと思ったのですが、そういうツッコミは野暮ですよね。&lt;/p&gt;

&lt;h2 id=&#34;アツい戦闘シーン&#34;&gt;アツい戦闘シーン&lt;/h2&gt;

&lt;p&gt;個人的に会社で見たときから推していたアレクというキャラとカヅキが戦うシーンがあるんですね。ダンスで。&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/areku-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;アレク様&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/kazuki-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;カズキ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

二人とも見ての通り、アイドル系というより、ストリート系なのですが、&lt;br /&gt;
アレクさんは&lt;br /&gt;
「おまえはストリートの面汚しだ！もう踊れないように体をバラバラにしてやる！！」&lt;br /&gt;
などと煽っていきます。&lt;/p&gt;

&lt;p&gt;その勝負、このタイガが仕切ろうとするのですが、&lt;br /&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/taiga-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;タイガ&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;br /&gt;
この子の手のひらクルーっっぷりもキレッキレなのでよかったですね。&lt;/p&gt;

&lt;p&gt;ただ、このダンス勝負、二人とも必殺技以外は一緒の動きで、ほとんどストリート要素がないんです。&lt;br /&gt;
そんなアレクさんまじでかわいい。&lt;/p&gt;

&lt;p&gt;結局アレクさん負けちゃうんですが、そこでもキンプリエリートたちは違いました。&lt;br /&gt;
&lt;strong&gt;\明日は勝てるよアレク！！/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;いやぁ、ほんとにすごいなあ。&lt;/p&gt;

&lt;h2 id=&#34;最後まですごい&#34;&gt;最後まですごい&lt;/h2&gt;

&lt;p&gt;学校へ行こう！の未成年の主張丸出しのシーンとか、

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/shuchou-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;みんなに言いたいことがありま〜す&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;strong&gt;\な〜〜〜に〜〜〜〜/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ギリシャ神話なシーンとか、

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/greece-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;たのしそう&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;strong&gt;\ふぅ〜〜〜〜〜〜！！！！/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;電車でハリウッドに行ってしまったと思ったら星座になっちゃったりとか

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/goto-hollywood-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;Go to HollyWood&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;strong&gt;\いかないで〜〜〜〜！！！/&lt;/strong&gt;

&lt;figure &gt;
    
        &lt;img src=&#34;https://pyonk.github.io/blog/blog/images/kinpri/star-min.jpg&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;なぜか星座になる&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;もうラストスパートがすごいのなんの。
みんなの息もぴったりでした。
最後は最後で、
&lt;strong&gt;\グロリアスシュヴァルツ！！/&lt;/strong&gt;
&lt;strong&gt;\グロリアスシュヴァルツ！！/&lt;/strong&gt;
の大合唱で幕が閉じるわけです。&lt;/p&gt;

&lt;p&gt;。。。と思いきや、どこからともなく&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;\アンコール！アンコール！！！/&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;しばらくみんなで叫んでいると
最後に映画のトレーラがながれました。映画館の粋な計らいなのか、もうこれが定番なのかよくわからないですが、これで試合終了です。&lt;/p&gt;

&lt;p&gt;いや本当にすごい。プリズムショーはいいぞ。&lt;/p&gt;

&lt;h1 id=&#34;またいきたいと思える&#34;&gt;またいきたいと思える&lt;/h1&gt;

&lt;p&gt;初めて応援上映なるものに参加したわけですが、4dxもさることながら本当に楽しい上映でしたね。
正直最初は乗り気ではなかったのですが、一緒に行った有志のなかでも一番盛り上がってしまいました。
映画をただ単に見るのも好きですが、こういう体感型の映画って、何回も回数重ねていくにつれて覚えたり、慣れてくるので何回も行きたいって自然に思えますね。&lt;/p&gt;

&lt;p&gt;場所によってはまだやっているところもあるようなので、ぜひ機会があればもう一度行きたいですね。&lt;/p&gt;

&lt;p&gt;本当に素晴らしい映画、否、プリズムショーでした。
一緒に見に行った会社の有志、映画館でのキンプリエリートたち、本当にありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nginxのimage_filterを使って画像を動的に縮小するには</title>
      <link>https://pyonk.github.io/blog/post/nginx-image-filter/</link>
      <pubDate>Fri, 15 Jul 2016 15:28:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/nginx-image-filter/</guid>
      <description>

&lt;h1 id=&#34;image-filterを使えるようにモジュールを指定する&#34;&gt;image_filterを使えるようにモジュールを指定する&lt;/h1&gt;

&lt;p&gt;nginxをソースからインストールする際に&lt;code&gt;--with-http_image_filter_module&lt;/code&gt;をつけてインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget http://nginx.org/download/nginx-1.10.1.tar.gz
$ tar -xvzf nginx-1.10.1.tar.gz
$ cd nginx-1.10.1
$ ./configure --with-http_image_filter_module
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほかのオプションモジュールをつける場合は随時つけてください。&lt;/p&gt;

&lt;p&gt;すでにnginxがインストールされている場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo cp objs/nginx /usr/sbin/nginx
$ cat /var/run/nginx.pid
10576
$ sudo kill -USR2 10576
$ sudo kill -WINCH 10576
$ sudo kill -QUIT 10576
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると今までの古いnginxのワーカープロセス、マスタープロセスをkillして、新しいnginxのマスタープロセス、ワーカープロセスが稼働するようになります。&lt;/p&gt;

&lt;h1 id=&#34;confを変更&#34;&gt;confを変更&lt;/h1&gt;

&lt;p&gt;image_filterを加えます。
くわしいことは&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_image_filter_module.html#image_filter&#34;&gt;ここ&lt;/a&gt;をみてください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx:hoge.conf&#34;&gt;location ~ /image/(.*\.png)$ {
        alias /path/to/image/$1;
            image_filter resize 100 -; # 横幅100pxでリサイズする
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず、これで/image配下のpngファイルはリサイズされて表示されるはずです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>