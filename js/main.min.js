class ThemeToggle{constructor(){this.currentTheme=this.getInitialTheme(),this.init()}getInitialTheme(){const e=localStorage.getItem("theme");return e?e:window.matchMedia("(prefers-color-scheme: dark)").matches?"dark-theme":"light-theme"}init(){this.applyTheme(this.currentTheme),this.createToggleButton(),window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",e=>{localStorage.getItem("theme")||(this.currentTheme=e.matches?"dark-theme":"light-theme",this.applyTheme(this.currentTheme),this.updateToggleIcon())})}createToggleButton(){const e=document.querySelectorAll(".theme-toggle-container");e.forEach(e=>{const t=document.createElement("button");t.className="theme-toggle",t.setAttribute("aria-label","Toggle theme"),t.innerHTML=this.getToggleIcon(),t.addEventListener("click",()=>this.toggle()),e.appendChild(t)})}getToggleIcon(){return this.currentTheme==="light-theme"?`<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
      </svg>`:`<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="5"/>
        <line x1="12" y1="1" x2="12" y2="3"/>
        <line x1="12" y1="21" x2="12" y2="23"/>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
        <line x1="1" y1="12" x2="3" y2="12"/>
        <line x1="21" y1="12" x2="23" y2="12"/>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
      </svg>`}toggle(){this.currentTheme=this.currentTheme==="light-theme"?"dark-theme":"light-theme",this.applyTheme(this.currentTheme),this.updateToggleIcon(),localStorage.setItem("theme",this.currentTheme)}applyTheme(e){document.body.className=document.body.className.replace(/(light|dark)-theme/g,""),document.body.classList.add(e)}updateToggleIcon(){const e=document.querySelectorAll(".theme-toggle");e.forEach(e=>{e.innerHTML=this.getToggleIcon()})}}class MobileMenu{constructor(){this.isOpen=!1,this.init()}init(){this.createMenuToggle()}createMenuToggle(){const e=document.querySelectorAll(".menu-toggle-container");e.forEach(e=>{const t=document.createElement("button");t.className="menu-trigger",t.setAttribute("aria-label","Toggle menu"),t.innerHTML=`
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="3" y1="6" x2="21" y2="6"/>
          <line x1="3" y1="12" x2="21" y2="12"/>
          <line x1="3" y1="18" x2="21" y2="18"/>
        </svg>
      `,t.addEventListener("click",()=>this.toggle()),e.appendChild(t)})}toggle(){this.isOpen=!this.isOpen;const e=document.querySelector(".menu");e&&e.classList.toggle("menu--active",this.isOpen)}}class ReadingProgress{constructor(){this.progress=0,this.init()}init(){(document.querySelector("article")||document.querySelector(".post"))&&(this.createProgressBar(),this.bindScrollEvent())}createProgressBar(){const e=document.createElement("div");e.className="reading-progress-container";const t=document.createElement("div");t.className="reading-progress";const n=document.createElement("div");n.className="reading-progress__bar",t.appendChild(n),e.appendChild(t),document.body.appendChild(e),this.progressBar=n}bindScrollEvent(){let e=!1;const t=()=>{const t=document.querySelector("article")||document.querySelector(".post");if(!t)return;const n=t.getBoundingClientRect(),o=n.height-window.innerHeight,i=Math.max(0,-n.top),s=Math.min(100,Math.max(0,i/o*100));this.progress=s,this.progressBar.style.width=`${s}%`,e=!1},n=()=>{e||(requestAnimationFrame(t),e=!0)};window.addEventListener("scroll",n),t()}}class SmoothScroll{constructor(){this.init()}init(){document.addEventListener("click",e=>{if(e.target.matches('a[href^="#"]')){e.preventDefault();const t=document.querySelector(e.target.getAttribute("href"));t&&t.scrollIntoView({behavior:"smooth",block:"start"})}})}}class EnhancedUI{constructor(){this.init()}init(){this.addHoverEffects(),this.addFocusEffects(),this.addLoadAnimations()}addHoverEffects(){const e=document.querySelectorAll("a, button, .post-entry");e.forEach(e=>{e.addEventListener("mouseenter",()=>{e.style.transition="transform 0.2s ease, box-shadow 0.2s ease"})})}addFocusEffects(){const e=document.querySelectorAll("a, button, input, textarea");e.forEach(e=>{e.addEventListener("focus",()=>{e.style.outline="2px solid var(--accent)",e.style.outlineOffset="2px"}),e.addEventListener("blur",()=>{e.style.outline="",e.style.outlineOffset=""})})}addLoadAnimations(){const e=document.querySelector(".content");e&&(e.style.opacity="0",e.style.transform="translateY(20px)",setTimeout(()=>{e.style.transition="opacity 0.6s ease, transform 0.6s ease",e.style.opacity="1",e.style.transform="translateY(0)"},100))}}function initializeTheme(){console.log("Initializing pyonk theme..."),new ThemeToggle,new MobileMenu,new ReadingProgress,new SmoothScroll,new EnhancedUI,console.log("Theme initialized successfully")}document.readyState==="loading"?document.addEventListener("DOMContentLoaded",initializeTheme):initializeTheme()