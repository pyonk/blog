<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on わいがかいた</title>
    <link>https://pyonk.github.io/blog/posts/</link>
    <description>Recent content in Posts on わいがかいた</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 15 Apr 2019 15:42:13 +0900</lastBuildDate>
    
	<atom:link href="https://pyonk.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>minio is awesome</title>
      <link>https://pyonk.github.io/blog/posts/minio-is-awesome/</link>
      <pubDate>Mon, 15 Apr 2019 15:42:13 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/minio-is-awesome/</guid>
      <description>S3使うにあたってローカル環境でもS3使わんといかんのかな〜って思って検索したらminioというS3互換のオブジェクトストレージがあったhttps://t.co/YLKdJrsasg
&amp;mdash; ヨシオカユウキ (@pyonknoyp) April 14, 2019  以前GCSを使っているときにローカルでテストするたびにテストデータがGCS上に溜まっていくのが嫌だなあ〜って思ってた。
S3に鞍替えしようと思って少し調べてみると、S3互換のオブジェクトストレージがあるらしい。 docker-composeと相性も良さそうなので使ってみることにした。
ちなみにDjangoでウェブサイトを構築している。
下準備 $ pip install django-storages boto3  python側で追加インストール必要なのはこれだけで あとはsettings.py
# S3にアップロード DEFAULT_FILE_STORAGE = &#39;storages.backends.s3boto3.S3Boto3Storage&#39; AWS_ACCESS_KEY_ID = &#39;minio&#39; # 自由に決めちゃっておk AWS_SECRET_ACCESS_KEY = &#39;minio123&#39; # 自由に決めちゃっておk AWS_STORAGE_BUCKET_NAME = &#39;static&#39; # 自由に決めちゃっておk AWS_S3_ENDPOINT_URL = &#39;http://minio:9000/&#39;  minio本体はdocker imageを利用するのが便利。
docker-compose.ymlに以下の記述を追加する。
version: &#39;3.2&#39; services: minio: image: minio/minio ports: - &amp;quot;9000:9000&amp;quot; volumes: - type: volume source: minio target: /export environment: MINIO_ACCESS_KEY: minio MINIO_SECRET_KEY: minio123 command: server /export volumes: minio:  これでdocker-compose upするとminioが立ち上がるので localhost:9000にアクセスしてstaticバケットを作っておく。</description>
    </item>
    
    <item>
      <title>vista.vim is awesome</title>
      <link>https://pyonk.github.io/blog/posts/vista-vim-is-awesome/</link>
      <pubDate>Wed, 27 Mar 2019 08:48:12 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/vista-vim-is-awesome/</guid>
      <description>この前coc.nvimを見つけたけど またredditにてvista.vimというのを見つけた。
 vista.vim: A tagbar alternative that supports LSP symbols and async processing : vim  /r/vimのRSS登録しとってよかった。
vista.vim vimをIDEのようにしてくれる夢のようなツール。
cocと連携してLSPのシンボルから出してくれるから、別途ctagsとか使わなくていい感じ（ctagsとの連携もできるみたい）。 fzfを使ってシンボルの絞り込み検索もできるので、楽しい感じ。
あたらしいプラグインのようで、まだ発展途上のようだ(2019-03)。
 ⚠️ Currently vista.vim is mostly usable, yet not stable. All the public APIs and global options can be changed or even be removed in the future.
― liuchengxu/vista.vim: View and search LSP symbols, tags in Vim
 とりあえずインストール 例のごとく僕はdeinを使っているので
[[plugins]] repo = &#39;liuchengxu/vista.vim&#39; depends = [&#39;coc.</description>
    </item>
    
    <item>
      <title>coc.nvim is awesome</title>
      <link>https://pyonk.github.io/blog/posts/how-to-use-coc-nvim/</link>
      <pubDate>Thu, 21 Mar 2019 09:33:38 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/how-to-use-coc-nvim/</guid>
      <description>相変わらず飽きずにいろんなエディタに浮気しまくっているけど最近はvimが楽しい。
この間redditみてたら
 python completion in coc.nvim + pyls : vim  こんなスレッドがあって
coc.nvimて見慣れないプラグインがあるなあと思ってみてみたら わかりやすそうだし、MPLSもバッチリつかえるっぽいから使ってみた。
インストール方法 僕はプラグインマネジャーにdeinを使ってるので
[[plugins]] repo = &#39;neoclide/coc.nvim&#39; build = &#39;coc#util#install()&#39; hook_add = &#39;&#39;&#39; nmap &amp;lt;silent&amp;gt; gd &amp;lt;Plug&amp;gt;(coc-definition) nmap &amp;lt;silent&amp;gt; gy &amp;lt;Plug&amp;gt;(coc-type-definition) nmap &amp;lt;silent&amp;gt; gi &amp;lt;Plug&amp;gt;(coc-implementation) nmap &amp;lt;silent&amp;gt; gr &amp;lt;Plug&amp;gt;(coc-references) &amp;quot; Remap for rename current word nmap &amp;lt;leader&amp;gt;rn &amp;lt;Plug&amp;gt;(coc-rename) &amp;quot; Highlight symbol under cursor on CursorHold autocmd CursorHold * silent call CocActionAsync(&#39;highlight&#39;) &amp;quot; Use K for show documentation in preview window nnoremap &amp;lt;silent&amp;gt; K :call &amp;lt;SID&amp;gt;show_documentation()&amp;lt;CR&amp;gt; function!</description>
    </item>
    
    <item>
      <title>Django Test Client Url Capture Not Working</title>
      <link>https://pyonk.github.io/blog/posts/django-test-client-url-capture-not-working/</link>
      <pubDate>Wed, 20 Feb 2019 15:12:08 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/django-test-client-url-capture-not-working/</guid>
      <description>from django.urls import path url_patterns = [ path(&#39;users/&amp;lt;int:user_id&amp;gt;/&#39;, views.show, name=&#39;user_show&#39;), ]  from django.test import TestCase, RequestFactory from users import views from django.contrib.auth.models import AnonymousUser from django.contrib.sessions.middleware import SessionMiddleware from django.contrib.messages.middleware import MessageMiddleware class UserViewTestCase(TestCase): def setUp(self): self.request = RequestFactory() def test_access_user_page(self): user_id = 1 req = self.request.get( reverse(&#39;user_show&#39;, args=(user_id,)) ) req.user = AnonymousUser() SessionMiddleware().process_request(req) MessageMiddleware().process_request(req) res = views.show(req) self.assertTrue(res.status_code, 302)  上記のようなテストコードがあったとすると views.showでself.kwargs[&#39;user_id&#39;]が参照できないっていう状況に1時間くらいハマった
結論から言うと RequestFactoryは単純にrequestオブジェクトを作るだけなので、urlsとか関係なく views.show(req)をテストしてるに過ぎないと言うことだった なので views.show(req, user_id=user_id)としてあげると良かったようだ</description>
    </item>
    
    <item>
      <title>Unityのscrollrectでスクロールができない件</title>
      <link>https://pyonk.github.io/blog/posts/unity-scrollrect-not-working/</link>
      <pubDate>Mon, 05 Nov 2018 15:37:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/unity-scrollrect-not-working/</guid>
      <description>最近仕事でUnityを触るようになってC#を書いているけど、なかなかにUnityのお作法になれない。 普段webをやってるのでCSSみたいに簡単にレイアウトしたり、javascriptみたいにかければいいのにと何度思ったことか・・。
タイトルの通りなのだけど、自分の備忘録がわりにメモしておこうと思う。
スクロールができないゾ ボタンを内包するスクロールビューが必要になった。
とりあえずボタンなしでスクロールビューを書いてきちんとスクロールできることを確認した。
いよいよボタンを、とボタンの機能自体は問題なくできてさーてスクロールも確認しておこうと思ったところ、うんともすんとも言わない。
これは困った
すこし調べてみると世界中の人が困ってる風だ。
UnityのScrollRectを拡張しよう | 株式会社ヘキサドライブ | HEXADRIVE | ゲーム制作を中心としたコンテンツクリエイト会社
違う違うそうじゃない 似てる問題っぽいけど違う（なんならこの見出しが書きたかっただけ）。 僕の症状はボタンは押せるけどスクロールができない、だ。
参考になったのはこちら
[Solved] Scroll not working when elements inside have click events - Unity Answers
結論、書いてるコードに問題があった。
 実際のコード  EventTrigger tapEvent = TitleTextObject.AddComponent&amp;lt;EventTrigger&amp;gt;(); EventTrigger.Entry entry = new EventTrigger.Entry(); entry.eventID = EventTriggerType.PointerClick; entry.callback.AddListener((data) =&amp;gt; { tapHandler((PointerEventData)data); }); tapEvent.triggers.Add(entry);  一見正しいけど、このEventTriggerっていうのが曲者でいろんな継承が行われてるみたい
 public class EventTrigger : MonoBehaviour, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler, IPointerClickHandler, IDragHandler, IDropHandler, IScrollHandler, IUpdateSelectedHandler, ISelectHandler, IDeselectHandler, IMoveHandler {</description>
    </item>
    
    <item>
      <title>let&#39;s splitがとどいた！</title>
      <link>https://pyonk.github.io/blog/posts/lets-split-arrive/</link>
      <pubDate>Tue, 12 Jun 2018 21:35:46 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/lets-split-arrive/</guid>
      <description>この間boothで購入したlet&amp;rsquo;s splitがあの後無事届きました。
@foostan さんにはマジ感謝マジ卍。
完動、感動でした。  マジかっこいい・・・   現在のキーマッピング 正直届いて触るまで、キーマッピングとか変更せんでもなんとなく使えるやろなんてことを思っていましたが、とんでもない。
いやこう言うと語弊がありますね。
もちろん(lets splitの)デフォルトで及第点くらいだったのですが、自分でキーマッピングを変えるのが醍醐味ということで試しにいくつか変えて見たところこれがまた素晴らしい。
default  Qwerty    Raise    Lower   自分の  Qwerty    Raise    Lower   こう見返すとほっとんどかわってない笑 なんならRaiseとLowerまんま一緒か！
けどescの位置はかなりお気に入り。当初は左上にしたんだけど、tabをおいておきたくて。
だいぶタイピングも慣れてきて、-とか~もノールックで行けるようになった。
目下課題に感じているのは左下の矢印キーたち。普段はctrl+hjklを矢印キーとしてつかっているから左下のは使わないのよなー。もったいない。
もちろんこの記事はlet&amp;rsquo;s splitで書かれました！！
新しい相棒でバリバリコード書くぞ〜〜</description>
    </item>
    
    <item>
      <title>let&#39;s splitを買った</title>
      <link>https://pyonk.github.io/blog/posts/buy-lets-split/</link>
      <pubDate>Thu, 24 May 2018 23:11:16 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/buy-lets-split/</guid>
      <description>1年くらい前、ergodoxの存在を知って以来、分割キーボード欲しいなーと思っていて、半年ほど前、会社の経費でmd600を買ってもらった。
アキバで色々触らせてもらって悩んだ挙句茶軸にした。個人的には青軸がよかったのだけど、会社で使うとなるとやはりやかましい。赤軸は定番と聞いたけど、なんとなく押し心地がな気持ちよくない。茶軸のちょうど良い感が気に入った。
で、会社におきっぱだから家で仕事をするときも分割がいいなあと思い始める。思い始めてしまった。
無事にキーボード沼にハマりかけている。
自作キーボード界隈をみてみるとすごーーーくかっこいい。
とくにHelixとかErgo42とかたまらない。
ただ、半田ごてとか握ったことないので不安だしなかなか手を出しづらい。（そもそも人気すぎて買えへん）
そんな感じでかっこいいキーボードをTLでながめていたわけど、@foostanさんがboothでlet&amp;rsquo;s splitを販売するらしいとの情報をキャッチ。
このままくすぶってても何にもならないので、エイやで購入を決意。
完成版か自分で組み立てるか結構悩んだけど、自作選んで半田ごてかうと完成版買えそうだったから完成版を買った。
完成品版let&amp;#39;s split注文した。
手作りキットのが楽しいかなーーって悩んだけど、初めての電子工作で不安だったので、今回は様子見。
届くのが楽しみだな〜〜〜！！
&amp;mdash; ヨシオカユウキ (@pyonknoyp) May 24, 2018  とにかく届くのが楽しみでごわす。
発送予定日が5/27なので週明けには手元に届いてるかしら。</description>
    </item>
    
    <item>
      <title>facebookのためにsocial loginをごにょごにょした話</title>
      <link>https://pyonk.github.io/blog/posts/social-login-update-for-facebook/</link>
      <pubDate>Wed, 20 Dec 2017 13:54:50 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/social-login-update-for-facebook/</guid>
      <description>facebookに見慣れぬアラートが。  突然のアラート    難しい英文    In 90 days, we&amp;rsquo;re making a security update to Facebook Login that will invalidate calls from URIs not listed in the Valid OAuth redirect URIs field of your Facebook Login settings.
This update comes in response to malicious activity we saw on our platform, and we want to protect your app or website by requiring a new strict mode for redirect URIs.</description>
    </item>
    
    <item>
      <title>djangoのquerysetを任意の順番でsortする</title>
      <link>https://pyonk.github.io/blog/posts/django-queryset-order-by-specific-values/</link>
      <pubDate>Fri, 10 Nov 2017 18:33:41 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/django-queryset-order-by-specific-values/</guid>
      <description>djangoのquerysetを任意の順番でsortする djnagoではorder_by(&#39;hoge&#39;)とするとhogeの昇順でならんでいくことは当たり前のように知っているよね。
が、ぼくがやりたかったのは、任意の値でのソート。
databaseに定義されてない値でソートしたかったのです。
とても参考になったstack overflowはこちら。
Django order_by specific order - Stack Overflow
 ただしdjango &amp;gt;= 1.8です
 TL;DR from djnago.db.models import Case, When, Value, FloatField # { pid: specific_value, } specific_values = { &#39;1&#39;: 100.0, &#39;2&#39;: 50.0, &#39;3&#39;: 25.0, &#39;4&#39;: 123.4, &#39;5&#39;: 599.33, } # sqlのCASE式にしたい条件のリスト cases = [] # casesにCASE式にしたい条件をつめていく for pid, specific_value in specific_values.items(): cases.append(When(id=pid, then=Value(specific_value))) # Hogeモデルに対して、pidで絞り込んだあとにcasesをつかってspecific_valueについて注釈づけてorder_byする Hoge.objects.filter(id__in=specific_values.keys()).annotate(specific_value=Case( *cases, output_field=FloatField() )).order_by(specific_value)  詳しい説明 Conditional Expressions | Django documentation | Django</description>
    </item>
    
    <item>
      <title>sublimetextでvimを使いたい日本人にとっておそらく便利なパッケージをつくった</title>
      <link>https://pyonk.github.io/blog/posts/create-disabled-ime-command-for-subl-with-vintage/</link>
      <pubDate>Wed, 18 Oct 2017 10:23:34 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/create-disabled-ime-command-for-subl-with-vintage/</guid>
      <description>ぼくは普段からsublimetextを使っているのだけど
（最近のアップデートでタイトルバーの色も変えられるようになってご機嫌）、vimに強い憧れがあって、使ってみたいなあと日頃から思っていた。
vim使ってる人のプロフェッショナル感がすごい。
sublでもとりあえずキーバインドはvimにして、触ってみよって思ってデフォルトでは無効になってるVintageを有効化した。
Vintageの有効化 Cmd + ,でsublimetextの設定を開く。
ここのVintageを消す。
 vintage消す   有効化done
つかってみる つかってみるとわかるんだけど、IMEがONの状態でINSERT MODEからCOMMAND MODEに移行するとIMEがONのままでコマンドを受け付けなくなるのですね
 こんな具合ですね   INSERT MODEからCOMMAND MODEに移行するためにescapeを押下するんだけど、そのときにIMEをOFFにすれば良いですね。
ちなみにgoogle日本語入力だとescapeを押下するときにIMEを無効にする設定があります。
 VimでNormalモード切り替え時にIMEをOFFにする、をMacでKarabiner無しで実現する 3  カラビナ使うっていう手もあるけど
できればパッケージで完結したいなと思って色々調べたら似たようなのがありました。
macではAppleScriptを使うみたいですね。
 SublimeText 3のVintageでコマンドモードの時にIMEをOffにするWin&amp;amp;Mac - Qiita  僕は拗らせているので、macのUS配列を使っているから上記のパッケージでは対応できず。
タイトルでは作ってみたって書いたけど、実際は機能追加だけです。タイトル詐欺。
で結果はこうなります。
 こんな具合ですね   おソース  pyonk/DisabledIme  こちらにおいてありますので、git cloneしてお使いくださいませ。</description>
    </item>
    
    <item>
      <title>pythonからpdfのフォームに入力する</title>
      <link>https://pyonk.github.io/blog/posts/fill-pdf-form-from-python/</link>
      <pubDate>Thu, 05 Oct 2017 15:46:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/fill-pdf-form-from-python/</guid>
      <description>pythonからpdfのフォームに入力する（厳密には違う） pythonでpdfのフォームに値を入力していく機能をつくりました。
そもそもpdfにフォームなんて埋められるんだって知らなかったです。
どうやら読み込み専用フォームとそうでないフォームがあるみたいです。
書き込めるフォームであってもフォントの指定や色付けとかが難しそうだったので、フォームに入力しない形式で実装しました。
なのでどちらにも対応できるような感じになってます。
事前準備  reportlab
$ pip install reportlab  PyPDF2
$ pip install pypdf2   コード #! /usr/bin/python # -*- coding: utf-8 -*- from reportlab.pdfgen import canvas from reportlab.lib.pagesizes import A4 from reportlab.pdfbase import pdfmetrics from reportlab.pdfbase.ttfonts import TTFont from PyPDF2.pdf import PdfFileReader, PdfFileWriter from io import BytesIO title = &#39;title&#39; # fontを変更 pdfmetrics.registerFont(TTFont(&#39;Mplus1p-Light&#39;, &#39;static/font/Mplus1p/Mplus1p-Light.ttf&#39;)) template_path = &#39;template.pdf&#39; # 読み込み reader = PdfFileReader(template_path) existing_page = reader.</description>
    </item>
    
    <item>
      <title>timetreeの500万ユーザー記念パーティに参加してきた</title>
      <link>https://pyonk.github.io/blog/posts/timetree-over-5m-users-party/</link>
      <pubDate>Thu, 31 Aug 2017 17:42:30 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/timetree-over-5m-users-party/</guid>
      <description>いつも使っているアプリの一つにtimetreeというカレンダーアプリがあるのだけど、ある日ふとお知らせをみたら、オフィスパーティ招待の募集が。 平日だし、どうしようか悩んだけど、とりあえず応募したら見事にご招待された。ありがとうございます。 ということで、昨日行って来ました。
TimeTree — 〜＊祝500万ユーザー突破！オフィス・パーティーへのご招待＊〜
まず、ものすごく可愛いオフィスで、良い空間であったということを伝えたい。
着くやいなやこんな感じ。  テーマはお祭り   で、撮った写真はこれ1枚だけ。 あとはひたすらお酒飲んで社員さんとお話してきました。
こういったパーティを過去に何回か開催しているみたい。素晴らしい取り組み。 テーマはお祭りだそう。 デザイナーさんが手作りした（すごい）という屋台が真ん中に鎮座しておりました。 タイムツリーのショップで売ってるアナログなカレンダーとかも壁に貼ってあったのだけどすごく可愛い。ほしい・・・。
社風も素晴らしかった。
基本みなさん英語でニックネームがついてて、大抵呼び捨て。
風通しがかなり良さそうな組織だ。
その方の素質なのかもしれないのだけど、ひと月前に入社したという方もものすごく打ち解けてた。
CEOのお話のもあったけど、そもそもユーザーを招待してパーティなんてやってるところはほとんどない（あったとしたらごめんなさいm(_ _)m）。
そういうのをやって、エンドユーザーからキャッチアップするというのは本当に素晴らしい。来るのはヘビーユーザーだけかもしれないけど、生のユーザーの声を聞ける貴重な機会だ。
ユーザーとしてもどういうところで、誰が開発してるのかって気になるし（ぼくだけ？）。
どんどんこういうのやってほしいと思いました。
うちの会社でも海外のユーザーを呼んで、聖地巡礼しつつパーティとか楽しそう。
とにかく、何人かの方とお話させていただきましたが、みなさんいい人揃いでした。
そして、今まで使ってきたアプリで、こういうアプリを作って見たい、作っている人と働いてみたいと思ったことないもんだから、すごく期待していったのだけど、概ね期待以上でした（贔屓のアプリであるというのもあるのかもしれないが）。
今後のアップデート情報（ほとんど秘密で教えてもらえなかったけど笑）もちらっとお聞きすることができたし、自分の要望を作っている方々に直接伝えることができて、なんというかアプリを育てている感が感じられて、とても有意義な時間だった。 一人ポツーンとした時間をつくらいないように、ユーザー一人一人に丁寧に接していて、いい組織なのだなあと感じた。
今後のアップデート、アップデートの際の文言（timetreeのアップデートの際には一言何かしらある）には期待したい。
同行する予定の人が急用で行けなかったのだけど、帰りにその分もおみやげをいただいたりして、本当にそういった気遣いが嬉しいところである。 とにかくおすすめしたい、このアプリ。 ぜひ使ってみると良いです。
次のパーティでも招待されると良いな〜。またお話を伺いに行きたい。
強いてなにか意見があるとすると、せっかく壁にプロジェクターでうつしていたのだから、なにかしらのLTとか発表があるとうれしかったかな。
さて、褒めちぎりすぎたのでここらへんで。
 TimeTree  android ios   </description>
    </item>
    
    <item>
      <title>多動力を読んだ</title>
      <link>https://pyonk.github.io/blog/posts/read-tadouryoku/</link>
      <pubDate>Mon, 21 Aug 2017 21:23:11 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/read-tadouryoku/</guid>
      <description>久しぶりに読書がしたくなった。数ヶ月前も1度あったのだけど、そのときは日和って買わなかった。
今日は買うという強い意志を持っていた。
そして目に付いた「多動力」
  多動力   大学時代のゼミの同期がFacebookだかで読んだ感想をアップしてたのを思い出して、とりあえず買ってきた。
正直何でもよかった。
で、同期が書いてた感想みたいに綺麗な文章でもないけど、一応読んだっていう記録しときたくなった。
感想。 100％同意すごい！神！！っていう感じではなかったけど、ホリエモンすげえ人だった。っていうのが読み終わった後すぐの感想。
我ながら小学生みたいな感想だ。
ゼミの同期が読んでたからなんとなく買ってみた本だったけど、当たりだった。直感は大事。
そういえばふと思ったけど、会社の役員でアイデアマンの人の考え方に似てた。
リズムの件とか、飽き性なとことか。 できる人っていうのはそういうもんなんだろうか。
恥ずかしいという感情 しっくりきたのが、恥ずかしいという感情が最大のハードルなんだよ、というところ。
これまさにそうだなあって強く思う。特に日本人ってそういう感じがする。もちろん僕も例外ではなくてむしろ、
僕は人の目を気にしすぎている。 例えばこれだって誰がみているわけではないのだけど、やっぱりなにか取り繕って書きたいっていう感情はあるし、この本の感想だってこういう風に書けば無難かな、みたいな感情があってうまく書けない。
そもそも本を読んだ感想ってなんだ、って思ったり。よくわからないんだけど、多分何か変わるかもと思って本を読みたくなってこんなのを書いているのだと勝手に思っている。
新日本の内藤も言ってたけど自分の意見なんて言わないと伝わらない。
もっと恥をかかなきゃいけない。
八方美人でいすぎた。
人生に目的はいらない これは最近思っていたこと。 転職だなんだって思って少し悩んだ時期もあったけど、結局自分の人生一度きりで、おもしろい、楽しいと感じることをやらんともったいないって思ってから気が楽になった(実際に転職はしなかったけど)。
「自分はこんなやばいサービスをつくるために生きてるんだ！」っていう目的のある人生って素晴らしいと思うし、別に否定するわけではないけど、僕は目的なんていらなくて、ふと振り返ってみたら「あ、いつの間にかこんなになった」っていう人生がいいなと思った。
それはそうと、最後のオチが非常に気持ち良かった。</description>
    </item>
    
    <item>
      <title>crontab -e と /etc/crontab の違い</title>
      <link>https://pyonk.github.io/blog/posts/difference-of-crontabe-and-etc-crontab/</link>
      <pubDate>Mon, 06 Feb 2017 12:28:58 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/difference-of-crontabe-and-etc-crontab/</guid>
      <description>ふとした拍子にcronのログを見ていたら同じコマンドが実行されていたんですね。
$ less /var/log/cron  Feb 6 00:15:01 ip-000-00-00-000 CROND[16356]: (user) CMD (python /home/user/app/manage.py hogehoge) Feb 6 00:15:01 ip-000-00-00-000 CROND[16357]: (user) CMD (user python /home/user/app/manage.py hogehoge)  追記 上記のコマンドの
user python /home/user/app/manage.py hogehoge
この部分、おかしいですね〜〜
/etc/crontabの内容を何も考えずにコピーしちゃいました。
/etc/crontabはユーザーを指定して記述するのに対して、crontab -eの場合はユーザーはログインユーザーとなるのでユーザーの記述はいらんのですね。猛省。
おかしいな〜おかしいな〜〜〜〜〜 こわいな〜こわいな〜〜〜〜。
何て思っていたんですが、そういえばcronの設定を二回したような気がしてきたので確かめてみました。
/etc/crontab まず初めにcronを設定したときはこのこをいじっていました。
$ sudo vim /etc/crontab  ですね。
crontab -e 何を思ったのかこっちでも設定していたような気がしました。
$ crontab -l  で確認することができます。
案の定同じコマンドが同じ時間で実行されるように設定されておりました。
この二つの違いはなんなんでしょうか こちらがわかりやすいかと思います。
要するに、 /etc/crontabは他のユーザーのcronもまとめて設定できるようなのですね。
たとえば
* * * * * user echo &#39;fugafuga&#39; * * * * * user2 echo &#39;hogehoge&#39;  のような感じです。</description>
    </item>
    
    <item>
      <title>あ！ やせいの requests.exceptions.SSLErrorが とびだしてきた！</title>
      <link>https://pyonk.github.io/blog/posts/cannot-request/</link>
      <pubDate>Thu, 02 Feb 2017 18:40:16 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/cannot-request/</guid>
      <description>あるサイトをクロールして情報を集めようと思ってpythonでプログラムを書いていたのですが、思わぬところでハマったので備忘録代わりに。
ナゾのrequests.exceptions.SSLError それなりにpythonのrequestsをつかってクローラーを書いていたのですぐできるワイヤ。と思っていたのですが、実行した途端にナゾのrequests.exceptions.SSLErrorが発生しました。
requests.exceptions.SSLError: hostname &#39;damedayo.com&#39; doesn&#39;t match either of &#39;www.kore.com&#39;, &#39;kore.com&#39;
おやおや、SSLErrorですから、なにかセキュリティ周りのエラーであることが予測できます。 さらにホスト名が違うことから、バーチャルホストを利用しているためにSSL証明書のhostが違うよっていうことなんでしょうか。
とりあえずverify=Falseを指定しても一度チャレンジです。
import requests req = requests.get(&#39;https://damedayo.com/&#39;, verify=False) print req.text  するとresponseが帰ってきました。
The client software did not provide a hostname using Server Name Indication (SNI), which is required to access this server.
はーーーーんんんんんんん
何はともあれ、ググります。
みっけた。
ん〜〜〜やはりバーチャルホスト周りっぽい。 というかpythonのバージョンが2.7.9以上であれば問題ないんか。コレ。
解決策としてStack Overflowへのリンクが貼ってありますね。こういうこともあるのね。初めて見た。
pip install pyOpenSSLで詰む pyOpenSSLとidnaをインストールしてあげるとよいよってあるのでやってみました。
idnaはすっきり入ってくれたのですがpyOpenSSLが上手くいかない。。(すでに入っていたためバージョンをあげています。)
$ pip install pyOpenSSL --upgrade .....前略..... 1 warning and 20 errors generated. error: command &#39;cc&#39; failed with exit status 1 ---------------------------------------- Failed building wheel for cryptography .</description>
    </item>
    
    <item>
      <title>pythonの参照渡しをどうすれば回避できるのか</title>
      <link>https://pyonk.github.io/blog/posts/python-copy/</link>
      <pubDate>Thu, 12 Jan 2017 18:21:36 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/python-copy/</guid>
      <description>ときたまpythonを書いているとこれって値渡しなんだっけ、参照渡しなんだっけと分からなくなります。 たとえば
hoge = {1:1, 2:2, 3:3} print id(hoge) # 140418104920496 fuga = hoge print id(fuga) # 140418104920496 fuga.update({ 4:4 }) print hoge == fuga # True  Pythonistなら常識ですよね。
どうすれば回避できるのか 割と単純です。
hoge = {1:1, 2:2, 3:3} print id(hoge) # 140418104920496 fuga = hoge.copy() print id(fuga) # 140418107009728 fuga.update({ 4:4 }) print hoge == fuga # False print hoge # {1:1, 2:2, 3:3} print fuga # {1:1, 2:2, 3:3, 4:4}  辞書の浅いコピーを取るにはcopy_dict = dict.</description>
    </item>
    
    <item>
      <title>Djangoでどうしても非同期でコマンドを実行したくなった</title>
      <link>https://pyonk.github.io/blog/posts/use-celery-for-send-email-django/</link>
      <pubDate>Fri, 06 Jan 2017 12:05:29 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/use-celery-for-send-email-django/</guid>
      <description>経緯 あるサイトで、顧客に新情報をメールでお知らせしたいときに、今まではコマンド叩いて送信していたのですが、結構面倒なのでブラウザからできないものかと試行錯誤していたのです。
コマンドの設計見直せっていうのは今回は置いといてください・・・。
どうしたのか いくつかの方法を試しました。
pythonからコマンドを叩く まず思い浮かんだのがコマンドをnohup &amp;amp;でpythonから叩く。
import subprocess import shlex cmd = &#39;nohup sleep 10 &amp;amp;&#39; subprocess.Popen(cmd)  が！！！ レスポンスが帰ってくるのは10秒後・・・。
つぎ！
thread化して逃げる この前書いたような感じです。
pythonでtupleをつくる - わいがかいた
結局、レスポンスが帰ってくるのは10秒後・・・。 ここ工夫するとどうにかなるような気もする。
つぎ！！
celeryを使う Celery - Distributed Task Queue — Celery 4.0.2 documentation
ようやく本題。
ググり始めた当初から名前を見かけてはいましたが敷居が高そうなのでスルーしてました。
実際やりはじめて少し後悔しましたし。
結構面倒くさかったので備忘録代わりに。
install まずは本体をインストールしていきます。
pip install -U Celery
celeryはbrokerとして * Redis * RabbitMQ * Amazon SQS
などを使うことができます。 今回はRedisを選択しました。
yum install redis
bundleも用意されているのでそれも。
pip install -U &amp;quot;celery[redis]&amp;quot;</description>
    </item>
    
    <item>
      <title>pythonでtupleをつくる</title>
      <link>https://pyonk.github.io/blog/posts/python-tuple/</link>
      <pubDate>Thu, 05 Jan 2017 15:05:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/python-tuple/</guid>
      <description>pythonのthreadで引数を渡したい Djangoで時間のかかる処理をスレッド化して逃げようとしたのですがうまくいかなかったのでメモ。
threading.Threadにはいくつか引数が渡せます。
 group target name args kwargs  詳しくはここで。
で、スレッド化したい処理に引数を渡そうと思って下記のように実装しました。
def command_execute(cmd): print cmd # (&#39;s&#39;, &#39;l&#39;, &#39;e&#39;, &#39;e&#39;, &#39;p&#39;, &#39; &#39;, &#39;1&#39;, &#39;0&#39;, &#39;;&#39;, &#39;e&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39; &#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;) subprocess.Popen(cmd, shell=True) return cmd = &#39;sleep 10;echo aaa&#39; t = threading.Thread(target=command_execute, args=(cmd)) t.daemon = True t.start()  すると、printされた文字列が (&#39;s&#39;, &#39;l&#39;, &#39;e&#39;, &#39;e&#39;, &#39;p&#39;, &#39; &#39;, &#39;1&#39;, &#39;0&#39;, &#39;;&#39;, &#39;e&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39; &#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;) となるわけです。 何が起きてるんだ状態です。</description>
    </item>
    
    <item>
      <title>○○さんに送る退職ポエム</title>
      <link>https://pyonk.github.io/blog/posts/retirement-poem-to-you/</link>
      <pubDate>Tue, 03 Jan 2017 16:02:48 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/retirement-poem-to-you/</guid>
      <description>これはなに 弊社では昨年末にパートの方ですが、初めての退職者がでました。 といっても3年ほど前から一緒に働いていた方です。
ちいさな場所で仕事をしていたときから一緒なので非常に古参の人らは寂しい思いです。 ちなみに僕が経営者、みたいな口調で始まってますがただの一平社員です。
本題ですが、その方が退職するということで色紙に寄せ書きをしようということになりました。 そこで僕がポエムを書くことになったので、ぼかしますが、ここに書き殴りたいと思います。
ポエム的な何か ○○さん、卒業おめでとうございます。
3年間お疲れさまでした。
会社がまだ小さい時を知っている数少ない第一世代の仲間です。
そして、数少ない酒飲み仲間でもあります。
非常に寂しいです。
いろいろ思い出があります。
仕事でのスピード、そして丁寧さ。
その中で爛々と輝くチェックの目。
・・・
お犬様の可愛さ。
無茶を言って書いてもらったミサワ仕様の絵。
初めて会ったバイトくんの怖がりよう。
屋根付きのバイク。
飲み会での下品な話。
ほかにも、通勤の曲は？と聞いたときに某イケイケのダンスグループとこたえていたこととか。
列挙すればきりがないです。
昼間の仕事のできる○○さんと、夜のよっぱらった○○さんのあのギャップを見れないと思うと辛いですね。
最後に、川柳で締めたいと思います。
「さよならを　言ってもまた会う　赤提灯」
きっとどうせ会うのでさよならはなしで。
本当にお疲れさまでした。
また飲みましょう。
P.S.
いつになったら娘さんの連絡先を教えていただけるのでしょうか。いつでも大丈夫なので教えていただきたく存じます。</description>
    </item>
    
    <item>
      <title>Hugofyにプルリクおくってみた</title>
      <link>https://pyonk.github.io/blog/posts/send-pullrequest-to-hugofy/</link>
      <pubDate>Tue, 03 Jan 2017 10:34:47 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/send-pullrequest-to-hugofy/</guid>
      <description>2017年明けましておめでとうございます。
初プルリク 昨年末になんとなくHugofyにプルリクを送ってみました。
ぼくの環境(mac)ではうまくうごいたんだけど、いろいろバグがあるみたいで弾かれちゃった。残念。
どうすればよかったのか  Windows環境でのテスト typo確認  軽い気持ちでプルリク送るもんではないですね〜〜〜。
いい経験になりました。 Thank you @akmittal
ちなみに macで動くやつはこちらにあるのでよければどうぞ。
pyonk/Hugofy 少しだけ機能追加してます。
追加した機能  hugo serveで立ち上げたサーバをkillする機能
 github pagesへのdeploy機能
 settingにRepositoryを追加してからどうぞ   もうすこしちゃんと作りこんでから出直します。反省。</description>
    </item>
    
    <item>
      <title>hubot-line-message-apiをつくってみてます</title>
      <link>https://pyonk.github.io/blog/posts/hubot-line-message-api/</link>
      <pubDate>Mon, 17 Oct 2016 10:38:19 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/hubot-line-message-api/</guid>
      <description>ソースはここです。
使い方 $ git clone https://github.com/pyonk/hubot-line-message-api.git
からの
&amp;quot;dependencies&amp;quot;: { &amp;quot;bar&amp;quot;: &amp;quot;file:./hubot-line-message-api&amp;quot; }  からの
$ hubot -a line-message-api
でいけると思います。
hubot-line-message-api 結構ガバガバ実装なのでAPI Referenceをしっかり読んでからやるのをオススメします。
設定 必須  LINE_CHANNEL_ACCESS_TOKEN  lineアカウントのBasic InfomationにあるChannel Access Tokenの値を設定してください。   任意  HUBOT_ENDPOINT  defaultで/hubot/incomingになってます。 自由に設定していただいて大丈夫です。  FIXIE_URL  herokuで走らす場合は必須かなと思います。 Fixieというアドオンを使います。 $ heroku addons:create fixie:tricycleを叩くと自動で設定されています。 出力されるIPアドレスをServer IP Whitelistに設定してあげてください。   できること 今のところpushで送信は対応できておらず、返信しかできません。
 返信
 テキスト  https://devdocs.line.me/ja/#text
module.exports = (robot) -&amp;gt; robot.hear /^テキスト$/, (res) -&amp;gt; res.</description>
    </item>
    
    <item>
      <title>javascriptのよくわからない書き方【連想配列編】</title>
      <link>https://pyonk.github.io/blog/posts/javascript-unknown-writing/</link>
      <pubDate>Tue, 30 Aug 2016 10:48:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/javascript-unknown-writing/</guid>
      <description>react + reduxでのアプリ開発に挑戦している際に、参考にしていたサイト様で、突然よくわからない記法が出てきたのでその備忘録に。
連想配列のなにかっぽい function myfunc(hoge, fuga) { var {hogehoge} = hoge; var { hogeKey: hogeValue, } = hogehoge || { hogeKey: &#39;&#39;, } return { hogeKey, } }  上記が件のコード。
けっか var dict1 = {keyA: {key1: 1}}; var dict2 = {keyB: {key1: 2}}; var dict3 = {keyA: {key2: 3}}; var dict4 = {keyC: {key2: 4}}; function myfunc(hoge) { var {keyA} = hoge; console.log(keyA); //hoge.keyAの値 console.log({keyA}); //keyAをキーに、keyAに代入されている値をバリューにした連想配列 var { key1: key1, } = keyA || { key1: &#39;&#39;, } console.</description>
    </item>
    
    <item>
      <title>nginxのimage_filterを使って画像を動的に縮小するには</title>
      <link>https://pyonk.github.io/blog/posts/nginx-image-filter/</link>
      <pubDate>Fri, 15 Jul 2016 15:28:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/posts/nginx-image-filter/</guid>
      <description>image_filterを使えるようにモジュールを指定する nginxをソースからインストールする際に--with-http_image_filter_moduleをつけてインストールします。
$ wget http://nginx.org/download/nginx-1.10.1.tar.gz $ tar -xvzf nginx-1.10.1.tar.gz $ cd nginx-1.10.1 $ ./configure --with-http_image_filter_module $ make $ sudo make install  ほかのオプションモジュールをつける場合は随時つけてください。
すでにnginxがインストールされている場合は、
$ sudo cp objs/nginx /usr/sbin/nginx $ cat /var/run/nginx.pid 10576 $ sudo kill -USR2 10576 $ sudo kill -WINCH 10576 $ sudo kill -QUIT 10576  とすると今までの古いnginxのワーカープロセス、マスタープロセスをkillして、新しいnginxのマスタープロセス、ワーカープロセスが稼働するようになります。
confを変更 image_filterを加えます。 くわしいことはここをみてください。
location ~ /image/(.*\.png)$ { alias /path/to/image/$1; image_filter resize 100 -; # 横幅100pxでリサイズする }  とりあえず、これで/image配下のpngファイルはリサイズされて表示されるはずです。</description>
    </item>
    
  </channel>
</rss>