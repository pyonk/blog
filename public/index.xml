<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>わいがかいた</title>
    <link>https://pyonk.github.io/blog/</link>
    <description>Recent content on わいがかいた</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>pyonk All rights reserved.</copyright>
    <lastBuildDate>Fri, 10 Nov 2017 18:33:41 +0900</lastBuildDate>
    
	<atom:link href="https://pyonk.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>djangoのquerysetを任意の順番でsortする</title>
      <link>https://pyonk.github.io/blog/post/django-queryset-order-by-specific-values/</link>
      <pubDate>Fri, 10 Nov 2017 18:33:41 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/django-queryset-order-by-specific-values/</guid>
      <description>djangoのquerysetを任意の順番でsortする djnagoではorder_by(&#39;hoge&#39;)とするとhogeの昇順でならんでいくことは当たり前のように知っているよね。
が、ぼくがやりたかったのは、任意の値でのソート。
databaseに定義されてない値でソートしたかったのです。
とても参考になったstack overflowはこちら。
Django order_by specific order - Stack Overflow
 ただしdjango &amp;gt;= 1.8です
 TL;DR fromdjnago.db.modelsimportCase,When,Value,FloatField# { pid: specific_value, }specific_values={&amp;#39;1&amp;#39;:100.0,&amp;#39;2&amp;#39;:50.0,&amp;#39;3&amp;#39;:25.0,&amp;#39;4&amp;#39;:123.4,&amp;#39;5&amp;#39;:599.33,}# sqlのCASE式にしたい条件のリストcases=[]# casesにCASE式にしたい条件をつめていくforpid,specific_valueinspecific_values.items():cases.append(When(id=pid,then=Value(specific_value)))# Hogeモデルに対して、pidで絞り込んだあとにcasesをつかってspecific_valueについて注釈づけてorder_byするHoge.objects.filter(id__in=specific_values.keys()).annotate(specific_value=Case(*cases,output_field=FloatField())).order_by(specific_value)  詳しい説明 Conditional Expressions | Django documentation | Django
TIPS  casesに条件をつめこむため、Caseインスタンスを作成する際に、*で展開してあげないといけない。  ここだけ気をつければ非常に便利（使い所があまりないのが玉に瑕）。</description>
    </item>
    
    <item>
      <title>sublimetextでvimを使いたい日本人にとっておそらく便利なパッケージをつくった</title>
      <link>https://pyonk.github.io/blog/post/create-disabled-ime-command-for-subl-with-vintage/</link>
      <pubDate>Wed, 18 Oct 2017 10:23:34 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/create-disabled-ime-command-for-subl-with-vintage/</guid>
      <description>ぼくは普段からsublimetextを使っているのだけど
（最近のアップデートでタイトルバーの色も変えられるようになってご機嫌）、vimに強い憧れがあって、使ってみたいなあと日頃から思っていた。
vim使ってる人のプロフェッショナル感がすごい。
sublでもとりあえずキーバインドはvimにして、触ってみよって思ってデフォルトでは無効になってるVintageを有効化した。
Vintageの有効化 Cmd + ,でsublimetextの設定を開く。
ここのVintageを消す。
 vintage消す   有効化done
つかってみる つかってみるとわかるんだけど、IMEがONの状態でINSERT MODEからCOMMAND MODEに移行するとIMEがONのままでコマンドを受け付けなくなるのですね
 こんな具合ですね   INSERT MODEからCOMMAND MODEに移行するためにescapeを押下するんだけど、そのときにIMEをOFFにすれば良いですね。
ちなみにgoogle日本語入力だとescapeを押下するときにIMEを無効にする設定があります。
 VimでNormalモード切り替え時にIMEをOFFにする、をMacでKarabiner無しで実現する 3  カラビナ使うっていう手もあるけど
できればパッケージで完結したいなと思って色々調べたら似たようなのがありました。
macではAppleScriptを使うみたいですね。
 SublimeText 3のVintageでコマンドモードの時にIMEをOffにするWin&amp;amp;Mac - Qiita  僕は拗らせているので、macのUS配列を使っているから上記のパッケージでは対応できず。
タイトルでは作ってみたって書いたけど、実際は機能追加だけです。タイトル詐欺。
で結果はこうなります。
 こんな具合ですね   おソース  pyonk/DisabledIme  こちらにおいてありますので、git cloneしてお使いくださいませ。</description>
    </item>
    
    <item>
      <title>pythonからpdfのフォームに入力する</title>
      <link>https://pyonk.github.io/blog/post/fill-pdf-form-from-python/</link>
      <pubDate>Thu, 05 Oct 2017 15:46:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/fill-pdf-form-from-python/</guid>
      <description> pythonからpdfのフォームに入力する（厳密には違う） pythonでpdfのフォームに値を入力していく機能をつくりました。
そもそもpdfにフォームなんて埋められるんだって知らなかったです。
どうやら読み込み専用フォームとそうでないフォームがあるみたいです。
書き込めるフォームであってもフォントの指定や色付けとかが難しそうだったので、フォームに入力しない形式で実装しました。
なのでどちらにも対応できるような感じになってます。
事前準備  reportlab
$ pip install reportlab  PyPDF2
$ pip install pypdf2   コード #! /usr/bin/python# -*- coding: utf-8 -*-fromreportlab.pdfgenimportcanvasfromreportlab.lib.pagesizesimportA4fromreportlab.pdfbaseimportpdfmetricsfromreportlab.pdfbase.ttfontsimportTTFontfromPyPDF2.pdfimportPdfFileReader,PdfFileWriterfromioimportBytesIOtitle=&amp;#39;title&amp;#39;# fontを変更pdfmetrics.registerFont(TTFont(&amp;#39;Mplus1p-Light&amp;#39;,&amp;#39;static/font/Mplus1p/Mplus1p-Light.ttf&amp;#39;))template_path=&amp;#39;template.pdf&amp;#39;# 読み込みreader=PdfFileReader(template_path)existing_page=reader.getPage(0)page_width=existing_page.mediaBox.getWidth()page_height=existing_page.mediaBox.getHeight()# 直接フォームに入力するのではないのでstreamとしてもっておくpacket=BytesIO()c=canvas.Canvas(packet,pagesize=A4)c.setFont(&amp;#39;Mplus1p-Light&amp;#39;,17)# titleはセンタリングc.drawCentredString(page_width/2,page_height-20,title)# formfieldsを取得fields=reader.trailer[&amp;#39;/Root&amp;#39;][&amp;#39;/AcroForm&amp;#39;][&amp;#39;/Fields&amp;#39;]forfinfields:field=f.getObject()# formの位置情報。おそらく[左上x, 左上y, 右下x, 右下y]rect=field.get(&amp;#39;/Rect&amp;#39;,[0.0,0.0])key=field.get(&amp;#39;/T&amp;#39;,&amp;#39;&amp;#39;)c.setFont(&amp;#39;Mplus1p-Light&amp;#39;,9)# 微調整c.drawString(float(rect[0])+3,float(rect[1])+3,key)c.save()# パケットの読み込みを先頭に戻すpacket.seek(0)new_pdf=PdfFileReader(packet)# テンプレートと書き込んだ内容をマージexisting_page.mergePage(new_pdf.getPage(0))# writerを用意writer=PdfFileWriter()writer.addPage(existing_page)# 書き込みwithopen(&amp;#39;output.pdf&amp;#39;,&amp;#39;wb&amp;#39;)asoutput_file:writer.write(output_file)  見てもらったらわかる通りフォームのある位置に文字列を描画した別のPDFと、テンプレートPDFを重ねている感じです。
おまけ ただフォームを埋めたいだけの場合
#! /usr/bin/python# -*- coding: utf-8 -*-fromPyPDF2.pdfimportPdfFileReader,PdfFileWritertemplate_path=&amp;#39;template.pdf&amp;#39;# 読み込みreader=PdfFileReader(template_path)existing_page=reader.getPage(0)page_width=existing_page.mediaBox.getWidth()page_height=existing_page.mediaBox.getHeight()# formfieldsを取得fields=reader.getFormTextFields()# formの値を更新forkeyinfields:fields[key]=key# writerを用意writer=PdfFileWriter()# 上書きwriter.updatePageFormFieldValues(existing_page,fields)writer.addPage(existing_page)# 書き込みwithopen(&amp;#39;output.pdf&amp;#39;,&amp;#39;wb&amp;#39;)asoutput_file:writer.write(output_file) </description>
    </item>
    
    <item>
      <title>timetreeの500万ユーザー記念パーティに参加してきた</title>
      <link>https://pyonk.github.io/blog/post/timetree-over-5m-users-party/</link>
      <pubDate>Thu, 31 Aug 2017 17:42:30 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/timetree-over-5m-users-party/</guid>
      <description>いつも使っているアプリの一つにtimetreeというカレンダーアプリがあるのだけど、ある日ふとお知らせをみたら、オフィスパーティ招待の募集が。 平日だし、どうしようか悩んだけど、とりあえず応募したら見事にご招待された。ありがとうございます。 ということで、昨日行って来ました。
TimeTree — 〜＊祝500万ユーザー突破！オフィス・パーティーへのご招待＊〜
まず、ものすごく可愛いオフィスで、良い空間であったということを伝えたい。
着くやいなやこんな感じ。  テーマはお祭り   で、撮った写真はこれ1枚だけ。 あとはひたすらお酒飲んで社員さんとお話してきました。
こういったパーティを過去に何回か開催しているみたい。素晴らしい取り組み。 テーマはお祭りだそう。 デザイナーさんが手作りした（すごい）という屋台が真ん中に鎮座しておりました。 タイムツリーのショップで売ってるアナログなカレンダーとかも壁に貼ってあったのだけどすごく可愛い。ほしい・・・。
社風も素晴らしかった。
基本みなさん英語でニックネームがついてて、大抵呼び捨て。
風通しがかなり良さそうな組織だ。
その方の素質なのかもしれないのだけど、ひと月前に入社したという方もものすごく打ち解けてた。
CEOのお話のもあったけど、そもそもユーザーを招待してパーティなんてやってるところはほとんどない（あったとしたらごめんなさいm(_ _)m）。
そういうのをやって、エンドユーザーからキャッチアップするというのは本当に素晴らしい。来るのはヘビーユーザーだけかもしれないけど、生のユーザーの声を聞ける貴重な機会だ。
ユーザーとしてもどういうところで、誰が開発してるのかって気になるし（ぼくだけ？）。
どんどんこういうのやってほしいと思いました。
うちの会社でも海外のユーザーを呼んで、聖地巡礼しつつパーティとか楽しそう。
とにかく、何人かの方とお話させていただきましたが、みなさんいい人揃いでした。
そして、今まで使ってきたアプリで、こういうアプリを作って見たい、作っている人と働いてみたいと思ったことないもんだから、すごく期待していったのだけど、概ね期待以上でした（贔屓のアプリであるというのもあるのかもしれないが）。
今後のアップデート情報（ほとんど秘密で教えてもらえなかったけど笑）もちらっとお聞きすることができたし、自分の要望を作っている方々に直接伝えることができて、なんというかアプリを育てている感が感じられて、とても有意義な時間だった。 一人ポツーンとした時間をつくらいないように、ユーザー一人一人に丁寧に接していて、いい組織なのだなあと感じた。
今後のアップデート、アップデートの際の文言（timetreeのアップデートの際には一言何かしらある）には期待したい。
同行する予定の人が急用で行けなかったのだけど、帰りにその分もおみやげをいただいたりして、本当にそういった気遣いが嬉しいところである。 とにかくおすすめしたい、このアプリ。 ぜひ使ってみると良いです。
次のパーティでも招待されると良いな〜。またお話を伺いに行きたい。
強いてなにか意見があるとすると、せっかく壁にプロジェクターでうつしていたのだから、なにかしらのLTとか発表があるとうれしかったかな。
さて、褒めちぎりすぎたのでここらへんで。
 TimeTree  android ios   </description>
    </item>
    
    <item>
      <title>多動力を読んだ</title>
      <link>https://pyonk.github.io/blog/post/read-tadouryoku/</link>
      <pubDate>Mon, 21 Aug 2017 21:23:11 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/read-tadouryoku/</guid>
      <description>久しぶりに読書がしたくなった。数ヶ月前も1度あったのだけど、そのときは日和って買わなかった。
今日は買うという強い意志を持っていた。
そして目に付いた「多動力」
  多動力   大学時代のゼミの同期がFacebookだかで読んだ感想をアップしてたのを思い出して、とりあえず買ってきた。
正直何でもよかった。
で、同期が書いてた感想みたいに綺麗な文章でもないけど、一応読んだっていう記録しときたくなった。
感想。 100％同意すごい！神！！っていう感じではなかったけど、ホリエモンすげえ人だった。っていうのが読み終わった後すぐの感想。
我ながら小学生みたいな感想だ。
ゼミの同期が読んでたからなんとなく買ってみた本だったけど、当たりだった。直感は大事。
そういえばふと思ったけど、会社の役員でアイデアマンの人の考え方に似てた。
リズムの件とか、飽き性なとことか。 できる人っていうのはそういうもんなんだろうか。
恥ずかしいという感情 しっくりきたのが、恥ずかしいという感情が最大のハードルなんだよ、というところ。
これまさにそうだなあって強く思う。特に日本人ってそういう感じがする。もちろん僕も例外ではなくてむしろ、
僕は人の目を気にしすぎている。 例えばこれだって誰がみているわけではないのだけど、やっぱりなにか取り繕って書きたいっていう感情はあるし、この本の感想だってこういう風に書けば無難かな、みたいな感情があってうまく書けない。
そもそも本を読んだ感想ってなんだ、って思ったり。よくわからないんだけど、多分何か変わるかもと思って本を読みたくなってこんなのを書いているのだと勝手に思っている。
新日本の内藤も言ってたけど自分の意見なんて言わないと伝わらない。
もっと恥をかかなきゃいけない。
八方美人でいすぎた。
人生に目的はいらない これは最近思っていたこと。 転職だなんだって思って少し悩んだ時期もあったけど、結局自分の人生一度きりで、おもしろい、楽しいと感じることをやらんともったいないって思ってから気が楽になった(実際に転職はしなかったけど)。
「自分はこんなやばいサービスをつくるために生きてるんだ！」っていう目的のある人生って素晴らしいと思うし、別に否定するわけではないけど、僕は目的なんていらなくて、ふと振り返ってみたら「あ、いつの間にかこんなになった」っていう人生がいいなと思った。
それはそうと、最後のオチが非常に気持ち良かった。</description>
    </item>
    
    <item>
      <title>crontab -e と /etc/crontab の違い</title>
      <link>https://pyonk.github.io/blog/post/difference-of-crontabe-and-etc-crontab/</link>
      <pubDate>Mon, 06 Feb 2017 12:28:58 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/difference-of-crontabe-and-etc-crontab/</guid>
      <description>ふとした拍子にcronのログを見ていたら同じコマンドが実行されていたんですね。
$ less /var/log/cron Feb 600:15:01 ip-000-00-00-000 CROND[16356]: (user)CMD (python /home/user/app/manage.py hogehoge)Feb 600:15:01 ip-000-00-00-000 CROND[16357]: (user)CMD (user python /home/user/app/manage.py hogehoge)  追記 上記のコマンドの
user python /home/user/app/manage.py hogehoge
この部分、おかしいですね〜〜
/etc/crontabの内容を何も考えずにコピーしちゃいました。
/etc/crontabはユーザーを指定して記述するのに対して、crontab -eの場合はユーザーはログインユーザーとなるのでユーザーの記述はいらんのですね。猛省。
おかしいな〜おかしいな〜〜〜〜〜 こわいな〜こわいな〜〜〜〜。
何て思っていたんですが、そういえばcronの設定を二回したような気がしてきたので確かめてみました。
/etc/crontab まず初めにcronを設定したときはこのこをいじっていました。
$ sudo vim /etc/crontab  ですね。
crontab -e 何を思ったのかこっちでも設定していたような気がしました。
$ crontab -l  で確認することができます。
案の定同じコマンドが同じ時間で実行されるように設定されておりました。
この二つの違いはなんなんでしょうか こちらがわかりやすいかと思います。
要するに、 /etc/crontabは他のユーザーのcronもまとめて設定できるようなのですね。
たとえば
* * * * * user echo&amp;#39;fugafuga&amp;#39;* * * * * user2 echo&amp;#39;hogehoge&amp;#39;  のような感じです。</description>
    </item>
    
    <item>
      <title>あ！ やせいの requests.exceptions.SSLErrorが とびだしてきた！</title>
      <link>https://pyonk.github.io/blog/post/yasei-no-sslerror/</link>
      <pubDate>Thu, 02 Feb 2017 18:40:16 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/yasei-no-sslerror/</guid>
      <description>あるサイトをクロールして情報を集めようと思ってpythonでプログラムを書いていたのですが、思わぬところでハマったので備忘録代わりに。
ナゾのrequests.exceptions.SSLError それなりにpythonのrequestsをつかってクローラーを書いていたのですぐできるワイヤ。と思っていたのですが、実行した途端にナゾのrequests.exceptions.SSLErrorが発生しました。
requests.exceptions.SSLError: hostname &#39;damedayo.com&#39; doesn&#39;t match either of &#39;www.kore.com&#39;, &#39;kore.com&#39;
おやおや、SSLErrorですから、なにかセキュリティ周りのエラーであることが予測できます。 さらにホスト名が違うことから、バーチャルホストを利用しているためにSSL証明書のhostが違うよっていうことなんでしょうか。
とりあえずverify=Falseを指定しても一度チャレンジです。
importrequestsreq=requests.get(&amp;#39;https://damedayo.com/&amp;#39;,verify=False)printreq.text  するとresponseが帰ってきました。
The client software did not provide a hostname using Server Name Indication (SNI), which is required to access this server.
はーーーーんんんんんんん
何はともあれ、ググります。
みっけた。
ん〜〜〜やはりバーチャルホスト周りっぽい。 というかpythonのバージョンが2.7.9以上であれば問題ないんか。コレ。
解決策としてStack Overflowへのリンクが貼ってありますね。こういうこともあるのね。初めて見た。
pip install pyOpenSSLで詰む pyOpenSSLとidnaをインストールしてあげるとよいよってあるのでやってみました。
idnaはすっきり入ってくれたのですがpyOpenSSLが上手くいかない。。(すでに入っていたためバージョンをあげています。)
$ pip install pyOpenSSL --upgrade .....前略..... 1warning and 20errors generated. error: command&amp;#39;cc&amp;#39;failed with exitstatus 1---------------------------------------- Failed building wheel forcryptography .</description>
    </item>
    
    <item>
      <title>pythonの参照渡しをどうすれば回避できるのか</title>
      <link>https://pyonk.github.io/blog/post/python-copy/</link>
      <pubDate>Thu, 12 Jan 2017 18:21:36 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/python-copy/</guid>
      <description>ときたまpythonを書いているとこれって値渡しなんだっけ、参照渡しなんだっけと分からなくなります。 たとえば
hoge={1:1,2:2,3:3}printid(hoge)# 140418104920496fuga=hogeprintid(fuga)# 140418104920496fuga.update({4:4})printhoge==fuga# True  Pythonistなら常識ですよね。
どうすれば回避できるのか 割と単純です。
hoge={1:1,2:2,3:3}printid(hoge)# 140418104920496fuga=hoge.copy()printid(fuga)# 140418107009728fuga.update({4:4})printhoge==fuga# Falseprinthoge# {1:1, 2:2, 3:3}printfuga# {1:1, 2:2, 3:3, 4:4}  辞書の浅いコピーを取るにはcopy_dict = dict.copy()が簡単ですね。
ちなみに、リストの場合はcopy_list = original_list[:]でコピーが取れます。
ただこれだと浅いコピーになります。
なので
hoge={1:{2:2,3:3}}printid(hoge)# 140418104920496fuga=hoge.copy()printid(fuga)# 140418107009728fuga[1].update({4:4})printhoge==fuga# Trueprinthoge# {1: {2: 2, 3: 3, 4: 4}}printfuga# {1: {2: 2, 3: 3, 4: 4}}  となってしまいます。
浅いコピーの場合は
 元のオブジェクト中に見つかったオブジェクトに対する 参照 を挿入  するようです。
深いコピー 上記の通り、オブジェクトの中のオブジェクトは参照渡しになります。
それを回避するために、copyモジュールをimportして、深いコピーを利用します。
importcopyhoge={1:{2:2,3:3}}printid(hoge)# 140418104920496fuga=copy.deepcopy(hoge)printid(fuga)# 140418107009728fuga[1].update({4:4})printhoge==fuga# Falseprinthoge# {1: {2: 2, 3: 3}}printfuga# {1: {2: 2, 3: 3, 4: 4}}  あら素敵。</description>
    </item>
    
    <item>
      <title>Djangoでどうしても非同期でコマンドを実行したくなった</title>
      <link>https://pyonk.github.io/blog/post/use-celery-for-send-email-django/</link>
      <pubDate>Fri, 06 Jan 2017 12:05:29 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/use-celery-for-send-email-django/</guid>
      <description>経緯 あるサイトで、顧客に新情報をメールでお知らせしたいときに、今まではコマンド叩いて送信していたのですが、結構面倒なのでブラウザからできないものかと試行錯誤していたのです。
コマンドの設計見直せっていうのは今回は置いといてください・・・。
どうしたのか いくつかの方法を試しました。
pythonからコマンドを叩く まず思い浮かんだのがコマンドをnohup &amp;amp;でpythonから叩く。
importsubprocessimportshlexcmd=&amp;#39;nohup sleep 10 &amp;amp;&amp;#39;subprocess.Popen(cmd)  が！！！ レスポンスが帰ってくるのは10秒後・・・。
つぎ！
thread化して逃げる この前書いたような感じです。
pythonでtupleをつくる - わいがかいた
結局、レスポンスが帰ってくるのは10秒後・・・。 ここ工夫するとどうにかなるような気もする。
つぎ！！
celeryを使う Celery - Distributed Task Queue — Celery 4.0.2 documentation
ようやく本題。
ググり始めた当初から名前を見かけてはいましたが敷居が高そうなのでスルーしてました。
実際やりはじめて少し後悔しましたし。
結構面倒くさかったので備忘録代わりに。
install まずは本体をインストールしていきます。
pip install -U Celery
celeryはbrokerとして * Redis * RabbitMQ * Amazon SQS
などを使うことができます。 今回はRedisを選択しました。
yum install redis
bundleも用意されているのでそれも。
pip install -U &amp;quot;celery[redis]&amp;quot;
how to ここを参考にモリモリかいていきます。
 proj/__init__.py  from__future__importabsolute_import,unicode_literals# This will make sure the app is always imported when# Django starts so that shared_task will use this app.</description>
    </item>
    
    <item>
      <title>pythonでtupleをつくる</title>
      <link>https://pyonk.github.io/blog/post/python-tuple/</link>
      <pubDate>Thu, 05 Jan 2017 15:05:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/python-tuple/</guid>
      <description>pythonのthreadで引数を渡したい Djangoで時間のかかる処理をスレッド化して逃げようとしたのですがうまくいかなかったのでメモ。
threading.Threadにはいくつか引数が渡せます。
 group target name args kwargs  詳しくはここで。
で、スレッド化したい処理に引数を渡そうと思って下記のように実装しました。
defcommand_execute(cmd):printcmd# (&amp;#39;s&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;p&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;;&amp;#39;, &amp;#39;e&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;h&amp;#39;, &amp;#39;o&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;, &amp;#39;a&amp;#39;)subprocess.Popen(cmd,shell=True)returncmd=&amp;#39;sleep 10;echo aaa&amp;#39;t=threading.Thread(target=command_execute,args=(cmd))t.daemon=Truet.start()  すると、printされた文字列が (&#39;s&#39;, &#39;l&#39;, &#39;e&#39;, &#39;e&#39;, &#39;p&#39;, &#39; &#39;, &#39;1&#39;, &#39;0&#39;, &#39;;&#39;, &#39;e&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39; &#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;) となるわけです。 何が起きてるんだ状態です。
調べてみると原因は「argsにtupleを渡してあげる」というところにありました。
pythonでtupleをつくる tuple = (1, 2)
基本はこれ。
では、今回のように長さ1のtupleはどうやってつくるか
長さ1のtuple tuple = (1)</description>
    </item>
    
    <item>
      <title>○○さんに送る退職ポエム</title>
      <link>https://pyonk.github.io/blog/post/retirement-poem-to-you/</link>
      <pubDate>Tue, 03 Jan 2017 16:02:48 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/retirement-poem-to-you/</guid>
      <description>これはなに 弊社では昨年末にパートの方ですが、初めての退職者がでました。 といっても3年ほど前から一緒に働いていた方です。
ちいさな場所で仕事をしていたときから一緒なので非常に古参の人らは寂しい思いです。 ちなみに僕が経営者、みたいな口調で始まってますがただの一平社員です。
本題ですが、その方が退職するということで色紙に寄せ書きをしようということになりました。 そこで僕がポエムを書くことになったので、ぼかしますが、ここに書き殴りたいと思います。
ポエム的な何か ○○さん、卒業おめでとうございます。
3年間お疲れさまでした。
会社がまだ小さい時を知っている数少ない第一世代の仲間です。
そして、数少ない酒飲み仲間でもあります。
非常に寂しいです。
いろいろ思い出があります。
仕事でのスピード、そして丁寧さ。
その中で爛々と輝くチェックの目。
・・・
お犬様の可愛さ。
無茶を言って書いてもらったミサワ仕様の絵。
初めて会ったバイトくんの怖がりよう。
屋根付きのバイク。
飲み会での下品な話。
ほかにも、通勤の曲は？と聞いたときに某イケイケのダンスグループとこたえていたこととか。
列挙すればきりがないです。
昼間の仕事のできる○○さんと、夜のよっぱらった○○さんのあのギャップを見れないと思うと辛いですね。
最後に、川柳で締めたいと思います。
「さよならを　言ってもまた会う　赤提灯」
きっとどうせ会うのでさよならはなしで。
本当にお疲れさまでした。
また飲みましょう。
P.S.
いつになったら娘さんの連絡先を教えていただけるのでしょうか。いつでも大丈夫なので教えていただきたく存じます。</description>
    </item>
    
    <item>
      <title>Hugofyにプルリクおくってみた</title>
      <link>https://pyonk.github.io/blog/post/send-pullrequest-to-hugofy/</link>
      <pubDate>Tue, 03 Jan 2017 10:34:47 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/send-pullrequest-to-hugofy/</guid>
      <description>2017年明けましておめでとうございます。
初プルリク 昨年末になんとなくHugofyにプルリクを送ってみました。
ぼくの環境(mac)ではうまくうごいたんだけど、いろいろバグがあるみたいで弾かれちゃった。残念。
どうすればよかったのか  Windows環境でのテスト typo確認  軽い気持ちでプルリク送るもんではないですね〜〜〜。
いい経験になりました。 Thank you @akmittal
ちなみに macで動くやつはこちらにあるのでよければどうぞ。
pyonk/Hugofy 少しだけ機能追加してます。
追加した機能  hugo serveで立ち上げたサーバをkillする機能
 github pagesへのdeploy機能
 settingにRepositoryを追加してからどうぞ   もうすこしちゃんと作りこんでから出直します。反省。</description>
    </item>
    
    <item>
      <title>hubot-line-message-apiをつくってみてます</title>
      <link>https://pyonk.github.io/blog/post/hubot-line-message-api/</link>
      <pubDate>Mon, 17 Oct 2016 10:38:19 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/hubot-line-message-api/</guid>
      <description>ソースはここです。
使い方 $ git clone https://github.com/pyonk/hubot-line-message-api.git
からの
&amp;#34;dependencies&amp;#34;: { &amp;#34;bar&amp;#34;: &amp;#34;file:./hubot-line-message-api&amp;#34; }  からの
$ hubot -a line-message-api
でいけると思います。
hubot-line-message-api 結構ガバガバ実装なのでAPI Referenceをしっかり読んでからやるのをオススメします。
設定 必須  LINE_CHANNEL_ACCESS_TOKEN  lineアカウントのBasic InfomationにあるChannel Access Tokenの値を設定してください。   任意  HUBOT_ENDPOINT  defaultで/hubot/incomingになってます。 自由に設定していただいて大丈夫です。  FIXIE_URL  herokuで走らす場合は必須かなと思います。 Fixieというアドオンを使います。 $ heroku addons:create fixie:tricycleを叩くと自動で設定されています。 出力されるIPアドレスをServer IP Whitelistに設定してあげてください。   できること 今のところpushで送信は対応できておらず、返信しかできません。
 返信
 テキスト  https://devdocs.line.me/ja/#text
module.exports = (robot) -&amp;gt;robot.hear/^テキスト$/,(res) -&amp;gt;res.replytype: &amp;#39;text&amp;#39;contents: [&amp;#39;nyaa&amp;#39;]   画像と動画  https://devdocs.</description>
    </item>
    
    <item>
      <title>javascriptのよくわからない書き方【連想配列編】</title>
      <link>https://pyonk.github.io/blog/post/javascript-unknonwn-writing/</link>
      <pubDate>Tue, 30 Aug 2016 10:48:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/javascript-unknonwn-writing/</guid>
      <description>react + reduxでのアプリ開発に挑戦している際に、参考にしていたサイト様で、突然よくわからない記法が出てきたのでその備忘録に。
連想配列のなにかっぽい functionmyfunc(hoge,fuga){var{hogehoge}=hoge;var{hogeKey:hogeValue,}=hogehoge||{hogeKey:&amp;#39;&amp;#39;,}return{hogeKey,}}  上記が件のコード。
けっか vardict1={keyA:{key1:1}};vardict2={keyB:{key1:2}};vardict3={keyA:{key2:3}};vardict4={keyC:{key2:4}};functionmyfunc(hoge){var{keyA}=hoge;console.log(keyA);//hoge.keyAの値 console.log({keyA});//keyAをキーに、keyAに代入されている値をバリューにした連想配列 var{key1:key1,}=keyA||{key1:&amp;#39;&amp;#39;,}console.log(key1);//keyAがundefinedであれば空文字、keyAがあれば、keyA.key1の値をkey1に代入する。keyA.key1がなければkey1=undefinedになる。 return{key1,//key1をキーに、key1に代入されている値をバリューにした連想配列 }}myfunc(dict1);// {key1: 1} // {keyA: {key1: 1}} // 1 myfunc(dict2);// undefined // {keyA: undefined} // &amp;#39;&amp;#39; myfunc(dict3);// {key2: 3} // {keyA: {key2: 3}} // undefined myfunc(dict4);// undefined // {keyA: undefined} // &amp;#39;&amp;#39;  書いててよくわからなくなってきた。
つまり {keyA}=dict 連想配列(dict)のキー(keyA)を変数名にして、そのキーに対応する値(dict.keyA)を代入している。
これって vardict={keyA:&amp;#39;keyAだよ&amp;#39;};varkeyA=dict.keyA;  と一緒ですね。
{key1: key1} = dict || {key1: &amp;ldquo;} 連想配列(dict)のキー(key1)を変数名にしてそのキーに対応する値(dict.key1)を代入する。ない場合はkey1に初期値(空文字)をしている。
これって vardict={key1:&amp;#39;key1だよ&amp;#39;};varkey1=dict.key1?key1:&amp;#39;&amp;#39;;  と一緒ですね。
return {key1} 変数(key1)をキーにして、変数(key1)に代入された値をバリューにした連想配列をリターンしている。
varkey1=&amp;#39;hogehoge&amp;#39;;return{key1};// {key1: &amp;#39;hogehoge&amp;#39;}  これって varkey1=&amp;#39;key1だよ&amp;#39;;return{key1:key1};  と一緒ですね。</description>
    </item>
    
    <item>
      <title>nginxのimage_filterを使って画像を動的に縮小するには</title>
      <link>https://pyonk.github.io/blog/post/nginx-image-filter/</link>
      <pubDate>Fri, 15 Jul 2016 15:28:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/nginx-image-filter/</guid>
      <description>image_filterを使えるようにモジュールを指定する nginxをソースからインストールする際に--with-http_image_filter_moduleをつけてインストールします。
$ wget http://nginx.org/download/nginx-1.10.1.tar.gz $ tar -xvzf nginx-1.10.1.tar.gz $ cdnginx-1.10.1 $ ./configure --with-http_image_filter_module $ make $ sudo make install  ほかのオプションモジュールをつける場合は随時つけてください。
すでにnginxがインストールされている場合は、
$ sudo cp objs/nginx /usr/sbin/nginx $ cat /var/run/nginx.pid 10576$ sudo kill-USR2 10576$ sudo kill-WINCH 10576$ sudo kill-QUIT 10576  とすると今までの古いnginxのワーカープロセス、マスタープロセスをkillして、新しいnginxのマスタープロセス、ワーカープロセスが稼働するようになります。
confを変更 image_filterを加えます。 くわしいことはここをみてください。
location ~ /image/(.*\.png)$ { alias /path/to/image/$1; image_filter resize 100 -; # 横幅100pxでリサイズする }  とりあえず、これで/image配下のpngファイルはリサイズされて表示されるはずです。</description>
    </item>
    
  </channel>
</rss>