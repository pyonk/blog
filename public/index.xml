<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>わいがかいた</title>
    <link>https://pyonk.github.io/blog/</link>
    <description>Recent content on わいがかいた</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>pyonk</copyright>
    <lastBuildDate>Thu, 12 Jan 2017 18:21:36 +0900</lastBuildDate>
    <atom:link href="https://pyonk.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>pythonの参照渡しをどうすれば回避できるのか</title>
      <link>https://pyonk.github.io/blog/post/python-copy/</link>
      <pubDate>Thu, 12 Jan 2017 18:21:36 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/python-copy/</guid>
      <description>

&lt;p&gt;ときたまpythonを書いているとこれって値渡しなんだっけ、参照渡しなんだっけと分からなくなります。
たとえば&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hoge = {1:1, 2:2, 3:3}
print id(hoge) # 140418104920496

fuga = hoge
print id(fuga) # 140418104920496

fuga.update({
    4:4
})

print hoge == fuga # True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://note.crohaco.net/2014/python-argument-intro/&#34;&gt;Pythonistなら常識&lt;/a&gt;ですよね。&lt;/p&gt;

&lt;h1 id=&#34;どうすれば回避できるのか&#34;&gt;どうすれば回避できるのか&lt;/h1&gt;

&lt;p&gt;割と単純です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hoge = {1:1, 2:2, 3:3}
print id(hoge) # 140418104920496

fuga = hoge.copy()
print id(fuga) # 140418107009728

fuga.update({
    4:4
})

print hoge == fuga # False

print hoge # {1:1, 2:2, 3:3}

print fuga # {1:1, 2:2, 3:3, 4:4}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;辞書の浅いコピーを取るには&lt;code&gt;copy_dict = dict.copy()&lt;/code&gt;が簡単ですね。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ちなみに、リストの場合は&lt;code&gt;copy_list = original_list[:]&lt;/code&gt;でコピーが取れます。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ただこれだと浅いコピーになります。&lt;/p&gt;

&lt;p&gt;なので&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hoge = {1:{2:2, 3:3}}
print id(hoge) # 140418104920496

fuga = hoge.copy()
print id(fuga) # 140418107009728

fuga[1].update({
    4:4
})

print hoge == fuga # True

print hoge # {1: {2: 2, 3: 3, 4: 4}}

print fuga # {1: {2: 2, 3: 3, 4: 4}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となってしまいます。&lt;/p&gt;

&lt;p&gt;浅いコピーの場合は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;元のオブジェクト中に見つかったオブジェクトに対する 参照 を挿入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;するようです。&lt;/p&gt;

&lt;h1 id=&#34;深いコピー&#34;&gt;深いコピー&lt;/h1&gt;

&lt;p&gt;上記の通り、オブジェクトの中のオブジェクトは参照渡しになります。&lt;/p&gt;

&lt;p&gt;それを回避するために、copyモジュールをimportして、深いコピーを利用します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import copy

hoge = {1:{2:2, 3:3}}
print id(hoge) # 140418104920496

fuga = copy.deepcopy(hoge)
print id(fuga) # 140418107009728

fuga[1].update({
    4:4
})

print hoge == fuga # False

print hoge # {1: {2: 2, 3: 3}}

print fuga # {1: {2: 2, 3: 3, 4: 4}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あら素敵。&lt;/p&gt;

&lt;p&gt;結構厄介な場面も多いのできちんと覚えたいものです。&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.python.jp/2.6/library/copy.html&#34;&gt;8.17. copy — 浅いコピーおよび深いコピー操作 — Python 2.6ja2 documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Djangoでどうしても非同期でコマンドを実行したくなった</title>
      <link>https://pyonk.github.io/blog/post/use-celery-for-send-email-django/</link>
      <pubDate>Fri, 06 Jan 2017 12:05:29 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/use-celery-for-send-email-django/</guid>
      <description>

&lt;h1 id=&#34;経緯&#34;&gt;経緯&lt;/h1&gt;

&lt;p&gt;あるサイトで、顧客に新情報をメールでお知らせしたいときに、今まではコマンド叩いて送信していたのですが、結構面倒なのでブラウザからできないものかと試行錯誤していたのです。&lt;/p&gt;

&lt;p&gt;コマンドの設計見直せっていうのは今回は置いといてください・・・。&lt;/p&gt;

&lt;h1 id=&#34;どうしたのか&#34;&gt;どうしたのか&lt;/h1&gt;

&lt;p&gt;いくつかの方法を試しました。&lt;/p&gt;

&lt;h2 id=&#34;pythonからコマンドを叩く&#34;&gt;pythonからコマンドを叩く&lt;/h2&gt;

&lt;p&gt;まず思い浮かんだのがコマンドを&lt;code&gt;nohup &amp;amp;&lt;/code&gt;でpythonから叩く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import subprocess
import shlex

cmd = &#39;nohup sleep 10 &amp;amp;&#39;
subprocess.Popen(cmd)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;が！！！
レスポンスが帰ってくるのは10秒後・・・。&lt;/p&gt;

&lt;p&gt;つぎ！&lt;/p&gt;

&lt;h2 id=&#34;thread化して逃げる&#34;&gt;thread化して逃げる&lt;/h2&gt;

&lt;p&gt;この前書いたような感じです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pyonk.github.io/blog/post/python-tuple/&#34;&gt;pythonでtupleをつくる - わいがかいた&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結局、レスポンスが帰ってくるのは10秒後・・・。
ここ工夫するとどうにかなるような気もする。&lt;/p&gt;

&lt;p&gt;つぎ！！&lt;/p&gt;

&lt;h2 id=&#34;celeryを使う&#34;&gt;celeryを使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.celeryproject.org/en/latest/index.html&#34;&gt;Celery - Distributed Task Queue — Celery 4.0.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ようやく本題。&lt;/p&gt;

&lt;p&gt;ググり始めた当初から名前を見かけてはいましたが敷居が高そうなのでスルーしてました。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;実際やりはじめて少し後悔しましたし。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;結構面倒くさかったので備忘録代わりに。&lt;/p&gt;

&lt;h3 id=&#34;install&#34;&gt;install&lt;/h3&gt;

&lt;p&gt;まずは本体をインストールしていきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install -U Celery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;celeryはbrokerとして
* Redis
* RabbitMQ
* Amazon SQS&lt;/p&gt;

&lt;p&gt;などを使うことができます。
今回はRedisを選択しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yum install redis&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;bundleも用意されているのでそれも。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install -U &amp;quot;celery[redis]&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-to&#34;&gt;how to&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/celery/celery/tree/master/examples/django/&#34;&gt;ここ&lt;/a&gt;を参考にモリモリかいていきます。&lt;/p&gt;

&lt;p&gt;proj/__init__.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = [&#39;celery_app&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;proj/settings.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Celery settings

CELERY_RESULT_BACKEND = &#39;redis&#39; # redisを指定
CELERY_BROKER_URL = &#39;redis://localhost:6379/0&#39;
CELERY_TASK_SERIALIZER = &#39;json&#39;
CELERY_RESULT_SERIALIZER = &#39;json&#39;
CELERY_ACCEPT_CONTENT = [&#39;json&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;proj/celery.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

# set the default Django settings module for the &#39;celery&#39; program.
os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;proj.settings&#39;)

app = Celery(&#39;proj&#39;)

# Using a string here means the worker don&#39;t have to serialize
# the configuration object to child processes.
# - namespace=&#39;CELERY&#39; means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object(&#39;django.conf:settings&#39;, namespace=&#39;CELERY&#39;)

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()


@app.task(bind=True)
def debug_task(self):
    print(&#39;Request: {0!r}&#39;.format(self.request))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/tasks.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /usr/bin/python
# -*- coding: utf-8 -*-
# Create your tasks here
from __future__ import absolute_import, unicode_literals
# from celery import shared_task
from celery.decorators import task
import time


@task()
def add_wait(x, y):
    time.sleep(10)
    return x + y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/views.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from tasks import add_wait
def add_some_number.delay(request):
    result = add_wait(2,3)
    return render(rerquest, &#39;result.html&#39;, {
        &#39;result&#39;: result,
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;うごかしていきます&#34;&gt;うごかしていきます&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;redisの起動&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo /etc/init.d/redis start&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;celeryの起動&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;celery -A proj worker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;僕の環境はpythonのバージョンが&lt;code&gt;2.7.6&lt;/code&gt;なのですが、それだとエラーがおきます。&lt;/p&gt;

&lt;p&gt;というのもamqpというライブラリの中で使われている&lt;code&gt;struct.pack&lt;/code&gt;が原因のようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/celery/kombu/issues/609&#34;&gt;struct Type Error when consume internal log message. · Issue #609 · celery/kombu&lt;/a&gt;をみるとスッキリします。&lt;/p&gt;

&lt;p&gt;どうやらpythonのバグのようですね。&lt;br /&gt;
&lt;a href=&#34;https://bugs.python.org/issue19099&#34;&gt;Issue 19099: struct.pack fails first time with unicode fmt - Python tracker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;該当箇所を&lt;code&gt;str&lt;/code&gt;に変えてしまうと無事起動しました。&lt;/p&gt;

&lt;p&gt;疲れました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pythonでtupleをつくる</title>
      <link>https://pyonk.github.io/blog/post/python-tuple/</link>
      <pubDate>Thu, 05 Jan 2017 15:05:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/python-tuple/</guid>
      <description>

&lt;h1 id=&#34;pythonのthreadで引数を渡したい&#34;&gt;pythonのthreadで引数を渡したい&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/salexkidd/20090918&#34;&gt;Djangoで時間のかかる処理をスレッド化して逃げ&lt;/a&gt;ようとしたのですがうまくいかなかったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;threading.Thread&lt;/code&gt;にはいくつか引数が渡せます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;group&lt;/li&gt;
&lt;li&gt;target&lt;/li&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;args&lt;/li&gt;
&lt;li&gt;kwargs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しくは&lt;a href=&#34;http://docs.python.jp/2/library/threading.html&#34;&gt;ここ&lt;/a&gt;で。&lt;/p&gt;

&lt;p&gt;で、スレッド化したい処理に引数を渡そうと思って下記のように実装しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def command_execute(cmd):
    print cmd # (&#39;s&#39;, &#39;l&#39;, &#39;e&#39;, &#39;e&#39;, &#39;p&#39;, &#39; &#39;, &#39;1&#39;, &#39;0&#39;, &#39;;&#39;, &#39;e&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39; &#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;)
    subprocess.Popen(cmd, shell=True)
    return

cmd = &#39;sleep 10;echo aaa&#39;
t = threading.Thread(target=command_execute, args=(cmd))
t.daemon = True
t.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると、printされた文字列が
&lt;code&gt;(&#39;s&#39;, &#39;l&#39;, &#39;e&#39;, &#39;e&#39;, &#39;p&#39;, &#39; &#39;, &#39;1&#39;, &#39;0&#39;, &#39;;&#39;, &#39;e&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39; &#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;)&lt;/code&gt;
となるわけです。
何が起きてるんだ状態です。&lt;/p&gt;

&lt;p&gt;調べてみると原因は「&lt;code&gt;args&lt;/code&gt;にtupleを渡してあげる」というところにありました。&lt;/p&gt;

&lt;h2 id=&#34;pythonでtupleをつくる&#34;&gt;pythonでtupleをつくる&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tuple = (1, 2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;基本はこれ。&lt;/p&gt;

&lt;p&gt;では、今回のように長さ1のtupleはどうやってつくるか&lt;/p&gt;

&lt;h2 id=&#34;長さ1のtuple&#34;&gt;長さ1のtuple&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;tuple = (1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;普通のpythonist&lt;/strong&gt;であればこれは違うとわかるでしょうが、これだと思うでしょう？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple = (1)
print tuple # 1
print type(tuple) # &amp;lt;type &#39;int&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なんですよね。&lt;/p&gt;

&lt;h3 id=&#34;どうするのか&#34;&gt;どうするのか&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;tuple = (1,)&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tuple = (1,)
print tuple # (1,)
print type(tuple) # &amp;lt;type &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうでした。&lt;/p&gt;

&lt;h1 id=&#34;けっか&#34;&gt;けっか&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;def command_execute(cmd):
    print cmd # sleep 10;echo aaa
    subprocess.Popen(cmd, shell=True)
    return

cmd = &#39;sleep 10;echo aaa&#39;
t = threading.Thread(target=command_execute, args=(cmd,))
t.daemon = True
t.start()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こうしてあげることによって期待通りの動きをしてくれました。&lt;/p&gt;

&lt;p&gt;tupleの作り方に注意しなさい的な記述をどこかで見たような気がしたのですが、すっかり失念しておりました。猛省。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>○○さんに送る退職ポエム</title>
      <link>https://pyonk.github.io/blog/post/retirement-poem-to-you/</link>
      <pubDate>Tue, 03 Jan 2017 16:02:48 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/retirement-poem-to-you/</guid>
      <description>

&lt;h1 id=&#34;これはなに&#34;&gt;これはなに&lt;/h1&gt;

&lt;p&gt;弊社では昨年末にパートの方ですが、初めての退職者がでました。
といっても3年ほど前から一緒に働いていた方です。&lt;/p&gt;

&lt;p&gt;ちいさな場所で仕事をしていたときから一緒なので非常に古参の人らは寂しい思いです。
ちなみに僕が経営者、みたいな口調で始まってますがただの一平社員です。&lt;/p&gt;

&lt;p&gt;本題ですが、その方が退職するということで色紙に寄せ書きをしようということになりました。
そこで僕がポエムを書くことになったので、ぼかしますが、ここに書き殴りたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;ポエム的な何か&#34;&gt;ポエム的な何か&lt;/h2&gt;

&lt;p&gt;○○さん、卒業おめでとうございます。&lt;br /&gt;
3年間お疲れさまでした。&lt;br /&gt;
会社がまだ小さい時を知っている数少ない第一世代の仲間です。&lt;br /&gt;
そして、数少ない酒飲み仲間でもあります。&lt;br /&gt;
非常に寂しいです。&lt;/p&gt;

&lt;p&gt;いろいろ思い出があります。&lt;/p&gt;

&lt;p&gt;仕事でのスピード、そして丁寧さ。&lt;br /&gt;
その中で爛々と輝くチェックの目。&lt;br /&gt;
・・・&lt;br /&gt;
お犬様の可愛さ。&lt;br /&gt;
無茶を言って書いてもらったミサワ仕様の絵。&lt;br /&gt;
初めて会ったバイトくんの怖がりよう。&lt;br /&gt;
屋根付きのバイク。&lt;br /&gt;
飲み会での下品な話。&lt;br /&gt;
ほかにも、通勤の曲は？と聞いたときに某イケイケのダンスグループとこたえていたこととか。&lt;br /&gt;
列挙すればきりがないです。&lt;/p&gt;

&lt;p&gt;昼間の仕事のできる○○さんと、夜のよっぱらった○○さんのあのギャップを見れないと思うと辛いですね。&lt;/p&gt;

&lt;p&gt;最後に、川柳で締めたいと思います。&lt;br /&gt;
「さよならを　言ってもまた会う　赤提灯」&lt;/p&gt;

&lt;p&gt;きっとどうせ会うのでさよならはなしで。&lt;br /&gt;
本当にお疲れさまでした。&lt;br /&gt;
また飲みましょう。&lt;/p&gt;

&lt;p&gt;P.S.&lt;br /&gt;
いつになったら娘さんの連絡先を教えていただけるのでしょうか。いつでも大丈夫なので教えていただきたく存じます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugofyにプルリクおくってみた</title>
      <link>https://pyonk.github.io/blog/post/send-pullrequest-to-hugofy/</link>
      <pubDate>Tue, 03 Jan 2017 10:34:47 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/send-pullrequest-to-hugofy/</guid>
      <description>

&lt;p&gt;2017年明けましておめでとうございます。&lt;/p&gt;

&lt;h1 id=&#34;初プルリク&#34;&gt;初プルリク&lt;/h1&gt;

&lt;p&gt;昨年末になんとなく&lt;a href=&#34;https://github.com/akmittal/Hugofy&#34;&gt;Hugofy&lt;/a&gt;にプルリクを送ってみました。&lt;/p&gt;

&lt;p&gt;ぼくの環境(mac)ではうまくうごいたんだけど、いろいろバグがあるみたいで弾かれちゃった。残念。&lt;/p&gt;

&lt;h2 id=&#34;どうすればよかったのか&#34;&gt;どうすればよかったのか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Windows環境でのテスト&lt;/li&gt;
&lt;li&gt;typo確認&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;軽い気持ちでプルリク送るもんではないですね〜〜〜。&lt;/p&gt;

&lt;p&gt;いい経験になりました。
Thank you &lt;a href=&#34;https://github.com/akmittal&#34;&gt;@akmittal&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;ちなみに&#34;&gt;ちなみに&lt;/h1&gt;

&lt;p&gt;macで動くやつはこちらにあるのでよければどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/pyonk/Hugofy&#34;&gt;pyonk/Hugofy&lt;/a&gt;
少しだけ機能追加してます。&lt;/p&gt;

&lt;h2 id=&#34;追加した機能&#34;&gt;追加した機能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hugo serve&lt;/code&gt;で立ち上げたサーバをkillする機能&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;github pagesへのdeploy機能&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;settingに&lt;code&gt;Repository&lt;/code&gt;を追加してからどうぞ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;もうすこしちゃんと作りこんでから出直します。反省。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>hubot-line-message-apiをつくってみてます</title>
      <link>https://pyonk.github.io/blog/post/hubot-line-message-api/</link>
      <pubDate>Mon, 17 Oct 2016 10:38:19 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/hubot-line-message-api/</guid>
      <description>

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/pyonk/hubot-line-message-api&#34;&gt;ここです。&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;使い方&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;$ git clone https://github.com/pyonk/hubot-line-message-api.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;からの&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json:package.json&#34;&gt;&amp;quot;dependencies&amp;quot;: {
    &amp;quot;bar&amp;quot;: &amp;quot;file:./hubot-line-message-api&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;からの&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ hubot -a line-message-api&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;でいけると思います。&lt;/p&gt;

&lt;h1 id=&#34;hubot-line-message-api&#34;&gt;hubot-line-message-api&lt;/h1&gt;

&lt;p&gt;結構ガバガバ実装なので&lt;a href=&#34;https://devdocs.line.me/ja/&#34;&gt;API Reference&lt;/a&gt;をしっかり読んでからやるのをオススメします。&lt;/p&gt;

&lt;h2 id=&#34;設定&#34;&gt;設定&lt;/h2&gt;

&lt;h3 id=&#34;必須&#34;&gt;必須&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;LINE_CHANNEL_ACCESS_TOKEN

&lt;ul&gt;
&lt;li&gt;lineアカウントのBasic Infomationにある&lt;code&gt;Channel Access Token&lt;/code&gt;の値を設定してください。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;任意&#34;&gt;任意&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;HUBOT_ENDPOINT

&lt;ul&gt;
&lt;li&gt;defaultで/hubot/incomingになってます。&lt;/li&gt;
&lt;li&gt;自由に設定していただいて大丈夫です。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FIXIE_URL

&lt;ul&gt;
&lt;li&gt;herokuで走らす場合は必須かなと思います。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elements.heroku.com/addons/fixie&#34;&gt;Fixie&lt;/a&gt;というアドオンを使います。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ heroku addons:create fixie:tricycle&lt;/code&gt;を叩くと自動で設定されています。&lt;/li&gt;
&lt;li&gt;出力されるIPアドレスを&lt;code&gt;Server IP Whitelist&lt;/code&gt;に設定してあげてください。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;できること&#34;&gt;できること&lt;/h2&gt;

&lt;p&gt;今のところpushで送信は対応できておらず、返信しかできません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;返信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テキスト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://devdocs.line.me/ja/#text&#34;&gt;https://devdocs.line.me/ja/#text&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^テキスト$/, (res) -&amp;gt;
        res.reply
            type: &#39;text&#39;
            contents: [&#39;nyaa&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;画像と動画&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://devdocs.line.me/ja/#image&#34;&gt;https://devdocs.line.me/ja/#image&lt;/a&gt;
&lt;a href=&#34;https://devdocs.line.me/ja/#video&#34;&gt;https://devdocs.line.me/ja/#video&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^画像$/, (res) -&amp;gt;
        res.reply
            type:&#39;image&#39;# &#39;video&#39;
            content: [
                original: &#39;https://example.com/images/image.jpg&#39;
                preview: &#39;https://example.com/images/image.jpg&#39;
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ボタン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://devdocs.line.me/ja/#buttons&#34;&gt;https://devdocs.line.me/ja/#buttons&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^テキスト$/, (res) -&amp;gt;
        res.reply
            type: &#39;buttons&#39;
            altText: &#39;hogehoge&#39;
            contents: [
                image: &#39;https://example.com/images/image.jpg&#39;
                title: &#39;this is Buttons&#39;
                text: &#39;buttons description&#39;
                actions:[
                    type: &#39;uri&#39;
                    label: &#39;Open in Browser&#39;
                    uri: &#39;http://example.com/&#39;
                ]
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;カルーセル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://devdocs.line.me/ja/#carousel&#34;&gt;https://devdocs.line.me/ja/#carousel&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^カルーセル$/, (res) -&amp;gt;
        res.reply
            type: &#39;carousel&#39;
            altText: &#39;hogehoge&#39;
            contents: [
                image: &#39;https://example.com/images/image.jpg&#39;
                title: &#39;this is Buttons&#39;
                text: &#39;buttons description&#39;
                actions:[
                    type: &#39;uri&#39;
                    label: &#39;Open in Browser&#39;
                    uri: &#39;http://example.com/&#39;
                ],
                image: &#39;https://example.com/images/image.jpg&#39;
                title: &#39;this is Buttons&#39;
                text: &#39;buttons description&#39;
                actions:[
                    type: &#39;uri&#39;
                    label: &#39;Open in Browser&#39;
                    uri: &#39;http://example.com/&#39;
                ]...
            ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;くみあわせ&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;module.exports = (robot) -&amp;gt;
    robot.hear /^くみあわせ$/, (res) -&amp;gt;
        res.reply {
            type: &#39;text&#39;
            contents: [&#39;nyaa&#39;]
        },
        {
            type: &#39;buttons&#39;
            contents: [
                image: &#39;https://example.com/images/image.jpg&#39;
                title: &#39;this is Buttons&#39;
                text: &#39;buttons description&#39;
                actions: [
                    type: &#39;uri&#39;
                    label: &#39;Open in Browser&#39;
                    uri: &#39;http://example.com/&#39;
                ]
            ]
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;注意点&#34;&gt;注意点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;contents.length &amp;lt;= 5&lt;/code&gt;にしないとLINEに怒られます。

&lt;ul&gt;
&lt;li&gt;くみあわせて使う場合はcontents.lengthを足し算した値が5を超えないようにしないと怒られます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像のURLなどはhttpsでないと怒られます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;所感&#34;&gt;所感&lt;/h1&gt;

&lt;p&gt;hubotつかって新しくlinebot作ろうと思ってたらBOT API TrialからよりリッチなMessaging APIが発表されたらしいので、hubotのアダプター作っちゃえってなって作ってみた。&lt;br&gt;
タイトルにもある通り、まだ&lt;strong&gt;作ってみている&lt;/strong&gt;最中なのでちゃんとnpmにあげられるくらいちゃんと作ってみたい。&lt;br&gt;
とりあえず、最低限はできているような気もするので、公開してみる。&lt;br&gt;&lt;br&gt;
初めてcoffeescriptちゃんと触ったし、hubotのアダプターも初めて作るので探り探りすぎて疲れた^q^&lt;br&gt;&lt;br&gt;
けどたのしい。&lt;br&gt;&lt;br&gt;&lt;br&gt;
後から気づいたけど&lt;code&gt;message-api&lt;/code&gt;でなくて&lt;code&gt;messaging-api&lt;/code&gt;だったね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>javascriptのよくわからない書き方【連想配列編】</title>
      <link>https://pyonk.github.io/blog/post/javascript-unknonwn-writing/</link>
      <pubDate>Tue, 30 Aug 2016 10:48:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/javascript-unknonwn-writing/</guid>
      <description>

&lt;p&gt;react + reduxでのアプリ開発に挑戦している際に、参考にしていたサイト様で、突然よくわからない記法が出てきたのでその備忘録に。&lt;/p&gt;

&lt;h1 id=&#34;連想配列のなにかっぽい&#34;&gt;連想配列のなにかっぽい&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function myfunc(hoge, fuga) {
    var {hogehoge} = hoge;
    var {
        hogeKey: hogeValue,
    } = hogehoge || {
        hogeKey: &#39;&#39;,
    }
    return {
        hogeKey,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記が件のコード。&lt;/p&gt;

&lt;h1 id=&#34;けっか&#34;&gt;けっか&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict1 = {keyA: {key1: 1}};
var dict2 = {keyB: {key1: 2}};
var dict3 = {keyA: {key2: 3}};
var dict4 = {keyC: {key2: 4}};
function myfunc(hoge) {
    var {keyA} = hoge;
    console.log(keyA); //hoge.keyAの値
    console.log({keyA}); //keyAをキーに、keyAに代入されている値をバリューにした連想配列
    var {
        key1: key1,
    } = keyA || {
        key1: &#39;&#39;,
    }
    console.log(key1); //keyAがundefinedであれば空文字、keyAがあれば、keyA.key1の値をkey1に代入する。keyA.key1がなければkey1=undefinedになる。
    return {
        key1, //key1をキーに、key1に代入されている値をバリューにした連想配列
    }
}
myfunc(dict1);
// {key1: 1}
// {keyA: {key1: 1}}
// 1
myfunc(dict2);
// undefined
// {keyA: undefined}
// &#39;&#39;
myfunc(dict3);
// {key2: 3}
// {keyA: {key2: 3}}
// undefined
myfunc(dict4);
// undefined
// {keyA: undefined}
// &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;書いててよくわからなくなってきた。&lt;/p&gt;

&lt;h1 id=&#34;つまり&#34;&gt;つまり&lt;/h1&gt;

&lt;h2 id=&#34;keya-dict&#34;&gt;{keyA}=dict&lt;/h2&gt;

&lt;p&gt;連想配列(dict)のキー(keyA)を変数名にして、そのキーに対応する値(dict.keyA)を代入している。&lt;/p&gt;

&lt;h3 id=&#34;これって&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict = {keyA: &#39;keyAだよ&#39;};
var keyA = dict.keyA;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;h2 id=&#34;key1-key1-dict-key1&#34;&gt;{key1: key1} = dict || {key1: &amp;ldquo;}&lt;/h2&gt;

&lt;p&gt;連想配列(dict)のキー(key1)を変数名にしてそのキーに対応する値(dict.key1)を代入する。ない場合はkey1に初期値(空文字)をしている。&lt;/p&gt;

&lt;h3 id=&#34;これって-1&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict = {key1: &#39;key1だよ&#39;};
var key1 = dict.key1 ? key1: &#39;&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;h2 id=&#34;return-key1&#34;&gt;return {key1}&lt;/h2&gt;

&lt;p&gt;変数(key1)をキーにして、変数(key1)に代入された値をバリューにした連想配列をリターンしている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var key1 = &#39;hogehoge&#39;;
return {key1}; // {key1: &#39;hogehoge&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;これって-2&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var key1 = &#39;key1だよ&#39;;
return {key1: key1};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;という見解であってるんでしょうか・・・。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nginxのimage_filterを使って画像を動的に縮小するには</title>
      <link>https://pyonk.github.io/blog/post/nginx-image-filter/</link>
      <pubDate>Fri, 15 Jul 2016 15:28:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/nginx-image-filter/</guid>
      <description>

&lt;h1 id=&#34;image-filterを使えるようにモジュールを指定する&#34;&gt;image_filterを使えるようにモジュールを指定する&lt;/h1&gt;

&lt;p&gt;nginxをソースからインストールする際に&lt;code&gt;--with-http_image_filter_module&lt;/code&gt;をつけてインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget http://nginx.org/download/nginx-1.10.1.tar.gz
$ tar -xvzf nginx-1.10.1.tar.gz
$ cd nginx-1.10.1
$ ./configure --with-http_image_filter_module
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほかのオプションモジュールをつける場合は随時つけてください。&lt;/p&gt;

&lt;p&gt;すでにnginxがインストールされている場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo cp objs/nginx /usr/sbin/nginx
$ cat /var/run/nginx.pid
10576
$ sudo kill -USR2 10576
$ sudo kill -WINCH 10576
$ sudo kill -QUIT 10576
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると今までの古いnginxのワーカープロセス、マスタープロセスをkillして、新しいnginxのマスタープロセス、ワーカープロセスが稼働するようになります。&lt;/p&gt;

&lt;h1 id=&#34;confを変更&#34;&gt;confを変更&lt;/h1&gt;

&lt;p&gt;image_filterを加えます。
くわしいことは&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_image_filter_module.html#image_filter&#34;&gt;ここ&lt;/a&gt;をみてください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx:hoge.conf&#34;&gt;location ~ /image/(.*\.png)$ {
        alias /path/to/image/$1;
            image_filter resize 100 -; # 横幅100pxでリサイズする
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず、これで/image配下のpngファイルはリサイズされて表示されるはずです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>