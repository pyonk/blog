<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pyonk Blog</title>
    <link>https://pyonk.github.io/blog/</link>
    <description>Recent content on pyonk Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 17 Oct 2016 10:38:19 +0900</lastBuildDate>
    <atom:link href="https://pyonk.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>hubot-line-message-apiをつくってみてます</title>
      <link>https://pyonk.github.io/blog/post/hubot-line-message-api/</link>
      <pubDate>Mon, 17 Oct 2016 10:38:19 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/hubot-line-message-api/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/pyonk/hubot-line-message-api&#34;&gt;ここです。&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;使い方&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;後でちゃんと書くけどとりあえずREADME（書きかけ）をあげとく。&lt;/p&gt;

&lt;h1 id=&#34;hubot-line-message-api&#34;&gt;hubot-line-message-api&lt;/h1&gt;

&lt;h2 id=&#34;できること&#34;&gt;できること&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;返信&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テキスト
&lt;a href=&#34;https://devdocs.line.me/ja/#text&#34;&gt;https://devdocs.line.me/ja/#text&lt;/a&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;res.reply
    type: &#39;text&#39;
    content: &#39;nyaa&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;画像
&lt;a href=&#34;https://devdocs.line.me/ja/#image&#34;&gt;https://devdocs.line.me/ja/#image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;res.reply
    type:&#39;image&#39;
    content:
        original: &#39;https://example.com/images/image.jpg&#39;
        preview: &#39;https://example.com/images/image.jpg&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ボタン
&lt;a href=&#34;https://devdocs.line.me/ja/#buttons&#34;&gt;https://devdocs.line.me/ja/#buttons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;res.reply
    type: &#39;buttons&#39;
    content:
        image: &#39;https://example.com/images/image.jpg&#39;
        title: &#39;this is Buttons&#39;
        text: &#39;buttons description&#39;
        actions:[
            type: &#39;uri&#39;
            label: &#39;Open in Browser&#39;
            uri: &#39;http://example.com/
        ]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;使い方-1&#34;&gt;使い方&lt;/h1&gt;

&lt;p&gt;hubotつかってlinebot作ろうと思ってたらtrialbotからmessageAPIになるとかだったので、hubotのアダプター作っちゃえってなって作ってみた。&lt;br&gt;
タイトルにもある通り、まだ&lt;strong&gt;作ってみている&lt;/strong&gt;最中なのでちゃんとnpmにあげられるくらいちゃんと作ってみたい。&lt;br&gt;
とりあえず、最低限はできているような気もするので、公開してみる。&lt;br&gt;&lt;br&gt;
初めてcoffeescriptちゃんと触ったし、hubotのアダプターも初めて作るので探り探りすぎて疲れた^q^&lt;br&gt;&lt;br&gt;
けどたのしい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>javascriptのよくわからない書き方【連想配列編】</title>
      <link>https://pyonk.github.io/blog/post/javascript-unknonwn-writing/</link>
      <pubDate>Tue, 30 Aug 2016 10:48:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/javascript-unknonwn-writing/</guid>
      <description>

&lt;p&gt;react + reduxでのアプリ開発に挑戦している際に、参考にしていたサイト様で、突然よくわからない記法が出てきたのでその備忘録に。&lt;/p&gt;

&lt;h1 id=&#34;連想配列のなにかっぽい&#34;&gt;連想配列のなにかっぽい&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function myfunc(hoge, fuga) {
    var {hogehoge} = hoge;
    var {
        hogeKey: hogeValue,
    } = hogehoge || {
        hogeKey: &#39;&#39;,
    }
    return {
        hogeKey,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記が件のコード。&lt;/p&gt;

&lt;h1 id=&#34;けっか&#34;&gt;けっか&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict1 = {keyA: {key1: 1}};
var dict2 = {keyB: {key1: 2}};
var dict3 = {keyA: {key2: 3}};
var dict4 = {keyC: {key2: 4}};
function myfunc(hoge) {
    var {keyA} = hoge;
    console.log(keyA); //hoge.keyAの値
    console.log({keyA}); //keyAをキーに、keyAに代入されている値をバリューにした連想配列
    var {
        key1: key1,
    } = keyA || {
        key1: &#39;&#39;,
    }
    console.log(key1); //keyAがundefinedであれば空文字、keyAがあれば、keyA.key1の値をkey1に代入する。keyA.key1がなければkey1=undefinedになる。
    return {
        key1, //key1をキーに、key1に代入されている値をバリューにした連想配列
    }
}
myfunc(dict1);
// {key1: 1}
// {keyA: {key1: 1}}
// 1
myfunc(dict2);
// undefined
// {keyA: undefined}
// &#39;&#39;
myfunc(dict3);
// {key2: 3}
// {keyA: {key2: 3}}
// undefined
myfunc(dict4);
// undefined
// {keyA: undefined}
// &#39;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;書いててよくわからなくなってきた。&lt;/p&gt;

&lt;h1 id=&#34;つまり&#34;&gt;つまり&lt;/h1&gt;

&lt;h2 id=&#34;keya-dict&#34;&gt;{keyA}=dict&lt;/h2&gt;

&lt;p&gt;連想配列(dict)のキー(keyA)を変数名にして、そのキーに対応する値(dict.keyA)を代入している。&lt;/p&gt;

&lt;h3 id=&#34;これって&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict = {keyA: &#39;keyAだよ&#39;};
var keyA = dict.keyA;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;h2 id=&#34;key1-key1-dict-key1&#34;&gt;{key1: key1} = dict || {key1: &amp;ldquo;}&lt;/h2&gt;

&lt;p&gt;連想配列(dict)のキー(key1)を変数名にしてそのキーに対応する値(dict.key1)を代入する。ない場合はkey1に初期値(空文字)をしている。&lt;/p&gt;

&lt;h3 id=&#34;これって-1&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var dict = {key1: &#39;key1だよ&#39;};
var key1 = dict.key1 ? key1: &#39;&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;h2 id=&#34;return-key1&#34;&gt;return {key1}&lt;/h2&gt;

&lt;p&gt;変数(key1)をキーにして、変数(key1)に代入された値をバリューにした連想配列をリターンしている。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var key1 = &#39;hogehoge&#39;;
return {key1}; // {key1: &#39;hogehoge&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;これって-2&#34;&gt;これって&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var key1 = &#39;key1だよ&#39;;
return {key1: key1};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と一緒ですね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;という見解であってるんでしょうか・・・。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nginxのimage_filterを使って画像を動的に縮小するには</title>
      <link>https://pyonk.github.io/blog/post/nginx-image-filter/</link>
      <pubDate>Fri, 15 Jul 2016 15:28:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/nginx-image-filter/</guid>
      <description>

&lt;h1 id=&#34;image-filterを使えるようにモジュールを指定する&#34;&gt;image_filterを使えるようにモジュールを指定する&lt;/h1&gt;

&lt;p&gt;nginxをソースからインストールする際に&lt;code&gt;--with-http_image_filter_module&lt;/code&gt;をつけてインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget http://nginx.org/download/nginx-1.10.1.tar.gz
$ tar -xvzf nginx-1.10.1.tar.gz
$ cd nginx-1.10.1
$ ./configure --with-http_image_filter_module
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ほかのオプションモジュールをつける場合は随時つけてください。&lt;/p&gt;

&lt;p&gt;すでにnginxがインストールされている場合は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo cp objs/nginx /usr/sbin/nginx
$ cat /var/run/nginx.pid
10576
$ sudo kill -USR2 10576
$ sudo kill -WINCH 10576
$ sudo kill -QUIT 10576
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とすると今までの古いnginxのワーカープロセス、マスタープロセスをkillして、新しいnginxのマスタープロセス、ワーカープロセスが稼働するようになります。&lt;/p&gt;

&lt;h1 id=&#34;confを変更&#34;&gt;confを変更&lt;/h1&gt;

&lt;p&gt;image_filterを加えます。
くわしいことは&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_image_filter_module.html#image_filter&#34;&gt;ここ&lt;/a&gt;をみてください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx:hoge.conf&#34;&gt;location ~ /image/(.*\.png)$ {
        alias /path/to/image/$1;
            image_filter resize 100 -; # 横幅100pxでリサイズする
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず、これで/image配下のpngファイルはリサイズされて表示されるはずです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>