<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on わいがかいた</title>
    <link>https://pyonk.github.io/blog/tags/django/</link>
    <description>Recent content in Django on わいがかいた</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>pyonk</copyright>
    <lastBuildDate>Fri, 06 Jan 2017 12:05:29 +0900</lastBuildDate>
    <atom:link href="https://pyonk.github.io/blog/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Djangoでどうしても非同期でコマンドを実行したくなった</title>
      <link>https://pyonk.github.io/blog/post/use-celery-for-send-email-django/</link>
      <pubDate>Fri, 06 Jan 2017 12:05:29 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/use-celery-for-send-email-django/</guid>
      <description>

&lt;h1 id=&#34;経緯&#34;&gt;経緯&lt;/h1&gt;

&lt;p&gt;あるサイトで、顧客に新情報をメールでお知らせしたいときに、今まではコマンド叩いて送信していたのですが、結構面倒なのでブラウザからできないものかと試行錯誤していたのです。&lt;/p&gt;

&lt;p&gt;コマンドの設計見直せっていうのは今回は置いといてください・・・。&lt;/p&gt;

&lt;h1 id=&#34;どうしたのか&#34;&gt;どうしたのか&lt;/h1&gt;

&lt;p&gt;いくつかの方法を試しました。&lt;/p&gt;

&lt;h2 id=&#34;pythonからコマンドを叩く&#34;&gt;pythonからコマンドを叩く&lt;/h2&gt;

&lt;p&gt;まず思い浮かんだのがコマンドを&lt;code&gt;nohup &amp;amp;&lt;/code&gt;でpythonから叩く。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import subprocess
import shlex

cmd = &#39;nohup sleep 10 &amp;amp;&#39;
subprocess.Popen(cmd)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;が！！！
レスポンスが帰ってくるのは10秒後・・・。&lt;/p&gt;

&lt;p&gt;つぎ！&lt;/p&gt;

&lt;h2 id=&#34;thread化して逃げる&#34;&gt;thread化して逃げる&lt;/h2&gt;

&lt;p&gt;この前書いたような感じです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://pyonk.github.io/blog/post/python-tuple/&#34;&gt;pythonでtupleをつくる - わいがかいた&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;結局、レスポンスが帰ってくるのは10秒後・・・。
ここ工夫するとどうにかなるような気もする。&lt;/p&gt;

&lt;p&gt;つぎ！！&lt;/p&gt;

&lt;h2 id=&#34;celeryを使う&#34;&gt;celeryを使う&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.celeryproject.org/en/latest/index.html&#34;&gt;Celery - Distributed Task Queue — Celery 4.0.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ようやく本題。&lt;/p&gt;

&lt;p&gt;ググり始めた当初から名前を見かけてはいましたが敷居が高そうなのでスルーしてました。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;実際やりはじめて少し後悔しましたし。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;結構面倒くさかったので備忘録代わりに。&lt;/p&gt;

&lt;h3 id=&#34;install&#34;&gt;install&lt;/h3&gt;

&lt;p&gt;まずは本体をインストールしていきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install -U Celery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;celeryはbrokerとして
* Redis
* RabbitMQ
* Amazon SQS&lt;/p&gt;

&lt;p&gt;などを使うことができます。
今回はRedisを選択しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yum install redis&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;bundleも用意されているのでそれも。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pip install -U &amp;quot;celery[redis]&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;how-to&#34;&gt;how to&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/celery/celery/tree/master/examples/django/&#34;&gt;ここ&lt;/a&gt;を参考にモリモリかいていきます。&lt;/p&gt;

&lt;p&gt;proj/__init__.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from __future__ import absolute_import, unicode_literals

# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery import app as celery_app

__all__ = [&#39;celery_app&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;proj/settings.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Celery settings

CELERY_RESULT_BACKEND = &#39;redis&#39; # redisを指定
CELERY_BROKER_URL = &#39;redis://localhost:6379/0&#39;
CELERY_TASK_SERIALIZER = &#39;json&#39;
CELERY_RESULT_SERIALIZER = &#39;json&#39;
CELERY_ACCEPT_CONTENT = [&#39;json&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;proj/celery.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from __future__ import absolute_import, unicode_literals
import os
from celery import Celery

# set the default Django settings module for the &#39;celery&#39; program.
os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;proj.settings&#39;)

app = Celery(&#39;proj&#39;)

# Using a string here means the worker don&#39;t have to serialize
# the configuration object to child processes.
# - namespace=&#39;CELERY&#39; means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object(&#39;django.conf:settings&#39;, namespace=&#39;CELERY&#39;)

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()


@app.task(bind=True)
def debug_task(self):
    print(&#39;Request: {0!r}&#39;.format(self.request))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/tasks.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /usr/bin/python
# -*- coding: utf-8 -*-
# Create your tasks here
from __future__ import absolute_import, unicode_literals
# from celery import shared_task
from celery.decorators import task
import time


@task()
def add_wait(x, y):
    time.sleep(10)
    return x + y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;app/views.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from tasks import add_wait
def add_some_number.delay(request):
    result = add_wait(2,3)
    return render(rerquest, &#39;result.html&#39;, {
        &#39;result&#39;: result,
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;うごかしていきます&#34;&gt;うごかしていきます&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;redisの起動&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;sudo /etc/init.d/redis start&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;celeryの起動&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;celery -A proj worker&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;僕の環境はpythonのバージョンが&lt;code&gt;2.7.6&lt;/code&gt;なのですが、それだとエラーがおきます。&lt;/p&gt;

&lt;p&gt;というのもamqpというライブラリの中で使われている&lt;code&gt;struct.pack&lt;/code&gt;が原因のようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/celery/kombu/issues/609&#34;&gt;struct Type Error when consume internal log message. · Issue #609 · celery/kombu&lt;/a&gt;をみるとスッキリします。&lt;/p&gt;

&lt;p&gt;どうやらpythonのバグのようですね。&lt;br /&gt;
&lt;a href=&#34;https://bugs.python.org/issue19099&#34;&gt;Issue 19099: struct.pack fails first time with unicode fmt - Python tracker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;該当箇所を&lt;code&gt;str&lt;/code&gt;に変えてしまうと無事起動しました。&lt;/p&gt;

&lt;p&gt;疲れました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>