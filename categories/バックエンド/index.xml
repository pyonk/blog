<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>バックエンド on わいがかいた</title>
    <link>https://pyonk.github.io/blog/categories/%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89/</link>
    <description>Recent content in バックエンド on わいがかいた</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>pyonk All rights reserved.</copyright>
    <lastBuildDate>Fri, 10 Nov 2017 18:33:41 +0900</lastBuildDate>
    
	<atom:link href="https://pyonk.github.io/blog/categories/%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>djangoのquerysetを任意の順番でsortする</title>
      <link>https://pyonk.github.io/blog/post/django-queryset-order-by-specific-values/</link>
      <pubDate>Fri, 10 Nov 2017 18:33:41 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/django-queryset-order-by-specific-values/</guid>
      <description>djangoのquerysetを任意の順番でsortする djnagoではorder_by(&#39;hoge&#39;)とするとhogeの昇順でならんでいくことは当たり前のように知っているよね。
が、ぼくがやりたかったのは、任意の値でのソート。
databaseに定義されてない値でソートしたかったのです。
とても参考になったstack overflowはこちら。
Django order_by specific order - Stack Overflow
 ただしdjango &amp;gt;= 1.8です
 TL;DR fromdjnago.db.modelsimportCase,When,Value,FloatField# { pid: specific_value, }specific_values={&amp;#39;1&amp;#39;:100.0,&amp;#39;2&amp;#39;:50.0,&amp;#39;3&amp;#39;:25.0,&amp;#39;4&amp;#39;:123.4,&amp;#39;5&amp;#39;:599.33,}# sqlのCASE式にしたい条件のリストcases=[]# casesにCASE式にしたい条件をつめていくforpid,specific_valueinspecific_values.items():cases.append(When(id=pid,then=Value(specific_value)))# Hogeモデルに対して、pidで絞り込んだあとにcasesをつかってspecific_valueについて注釈づけてorder_byするHoge.objects.filter(id__in=specific_values.keys()).annotate(specific_value=Case(*cases,output_field=FloatField())).order_by(specific_value)  詳しい説明 Conditional Expressions | Django documentation | Django
TIPS  casesに条件をつめこむため、Caseインスタンスを作成する際に、*で展開してあげないといけない。  ここだけ気をつければ非常に便利（使い所があまりないのが玉に瑕）。</description>
    </item>
    
    <item>
      <title>pythonからpdfのフォームに入力する</title>
      <link>https://pyonk.github.io/blog/post/fill-pdf-form-from-python/</link>
      <pubDate>Thu, 05 Oct 2017 15:46:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/fill-pdf-form-from-python/</guid>
      <description> pythonからpdfのフォームに入力する（厳密には違う） pythonでpdfのフォームに値を入力していく機能をつくりました。
そもそもpdfにフォームなんて埋められるんだって知らなかったです。
どうやら読み込み専用フォームとそうでないフォームがあるみたいです。
書き込めるフォームであってもフォントの指定や色付けとかが難しそうだったので、フォームに入力しない形式で実装しました。
なのでどちらにも対応できるような感じになってます。
事前準備  reportlab
$ pip install reportlab  PyPDF2
$ pip install pypdf2   コード #! /usr/bin/python# -*- coding: utf-8 -*-fromreportlab.pdfgenimportcanvasfromreportlab.lib.pagesizesimportA4fromreportlab.pdfbaseimportpdfmetricsfromreportlab.pdfbase.ttfontsimportTTFontfromPyPDF2.pdfimportPdfFileReader,PdfFileWriterfromioimportBytesIOtitle=&amp;#39;title&amp;#39;# fontを変更pdfmetrics.registerFont(TTFont(&amp;#39;Mplus1p-Light&amp;#39;,&amp;#39;static/font/Mplus1p/Mplus1p-Light.ttf&amp;#39;))template_path=&amp;#39;template.pdf&amp;#39;# 読み込みreader=PdfFileReader(template_path)existing_page=reader.getPage(0)page_width=existing_page.mediaBox.getWidth()page_height=existing_page.mediaBox.getHeight()# 直接フォームに入力するのではないのでstreamとしてもっておくpacket=BytesIO()c=canvas.Canvas(packet,pagesize=A4)c.setFont(&amp;#39;Mplus1p-Light&amp;#39;,17)# titleはセンタリングc.drawCentredString(page_width/2,page_height-20,title)# formfieldsを取得fields=reader.trailer[&amp;#39;/Root&amp;#39;][&amp;#39;/AcroForm&amp;#39;][&amp;#39;/Fields&amp;#39;]forfinfields:field=f.getObject()# formの位置情報。おそらく[左上x, 左上y, 右下x, 右下y]rect=field.get(&amp;#39;/Rect&amp;#39;,[0.0,0.0])key=field.get(&amp;#39;/T&amp;#39;,&amp;#39;&amp;#39;)c.setFont(&amp;#39;Mplus1p-Light&amp;#39;,9)# 微調整c.drawString(float(rect[0])+3,float(rect[1])+3,key)c.save()# パケットの読み込みを先頭に戻すpacket.seek(0)new_pdf=PdfFileReader(packet)# テンプレートと書き込んだ内容をマージexisting_page.mergePage(new_pdf.getPage(0))# writerを用意writer=PdfFileWriter()writer.addPage(existing_page)# 書き込みwithopen(&amp;#39;output.pdf&amp;#39;,&amp;#39;wb&amp;#39;)asoutput_file:writer.write(output_file)  見てもらったらわかる通りフォームのある位置に文字列を描画した別のPDFと、テンプレートPDFを重ねている感じです。
おまけ ただフォームを埋めたいだけの場合
#! /usr/bin/python# -*- coding: utf-8 -*-fromPyPDF2.pdfimportPdfFileReader,PdfFileWritertemplate_path=&amp;#39;template.pdf&amp;#39;# 読み込みreader=PdfFileReader(template_path)existing_page=reader.getPage(0)page_width=existing_page.mediaBox.getWidth()page_height=existing_page.mediaBox.getHeight()# formfieldsを取得fields=reader.getFormTextFields()# formの値を更新forkeyinfields:fields[key]=key# writerを用意writer=PdfFileWriter()# 上書きwriter.updatePageFormFieldValues(existing_page,fields)writer.addPage(existing_page)# 書き込みwithopen(&amp;#39;output.pdf&amp;#39;,&amp;#39;wb&amp;#39;)asoutput_file:writer.write(output_file) </description>
    </item>
    
    <item>
      <title>crontab -e と /etc/crontab の違い</title>
      <link>https://pyonk.github.io/blog/post/difference-of-crontabe-and-etc-crontab/</link>
      <pubDate>Mon, 06 Feb 2017 12:28:58 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/difference-of-crontabe-and-etc-crontab/</guid>
      <description>ふとした拍子にcronのログを見ていたら同じコマンドが実行されていたんですね。
$ less /var/log/cron  Feb 6 00:15:01 ip-000-00-00-000 CROND[16356]: (user) CMD (python /home/user/app/manage.py hogehoge) Feb 6 00:15:01 ip-000-00-00-000 CROND[16357]: (user) CMD (user python /home/user/app/manage.py hogehoge)  追記 上記のコマンドの
user python /home/user/app/manage.py hogehoge
この部分、おかしいですね〜〜
/etc/crontabの内容を何も考えずにコピーしちゃいました。
/etc/crontabはユーザーを指定して記述するのに対して、crontab -eの場合はユーザーはログインユーザーとなるのでユーザーの記述はいらんのですね。猛省。
おかしいな〜おかしいな〜〜〜〜〜 こわいな〜こわいな〜〜〜〜。
何て思っていたんですが、そういえばcronの設定を二回したような気がしてきたので確かめてみました。
/etc/crontab まず初めにcronを設定したときはこのこをいじっていました。
$ sudo vim /etc/crontab  ですね。
crontab -e 何を思ったのかこっちでも設定していたような気がしました。
$ crontab -l  で確認することができます。
案の定同じコマンドが同じ時間で実行されるように設定されておりました。
この二つの違いはなんなんでしょうか こちらがわかりやすいかと思います。
要するに、 /etc/crontabは他のユーザーのcronもまとめて設定できるようなのですね。
たとえば
* * * * * user echo &#39;fugafuga&#39; * * * * * user2 echo &#39;hogehoge&#39;  のような感じです。</description>
    </item>
    
    <item>
      <title>あ！ やせいの requests.exceptions.SSLErrorが とびだしてきた！</title>
      <link>https://pyonk.github.io/blog/post/yasei-no-sslerror/</link>
      <pubDate>Thu, 02 Feb 2017 18:40:16 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/yasei-no-sslerror/</guid>
      <description>あるサイトをクロールして情報を集めようと思ってpythonでプログラムを書いていたのですが、思わぬところでハマったので備忘録代わりに。
ナゾのrequests.exceptions.SSLError それなりにpythonのrequestsをつかってクローラーを書いていたのですぐできるワイヤ。と思っていたのですが、実行した途端にナゾのrequests.exceptions.SSLErrorが発生しました。
requests.exceptions.SSLError: hostname &#39;damedayo.com&#39; doesn&#39;t match either of &#39;www.kore.com&#39;, &#39;kore.com&#39;  おやおや、SSLErrorですから、なにかセキュリティ周りのエラーであることが予測できます。 さらにホスト名が違うことから、バーチャルホストを利用しているためにSSL証明書のhostが違うよっていうことなんでしょうか。
とりあえずverify=Falseを指定しても一度チャレンジです。
import requests req = requests.get(&#39;https://damedayo.com/&#39;, verify=False) print req.text  するとresponseが帰ってきました。
The client software did not provide a hostname using Server Name Indication (SNI), which is required to access this server.  はーーーーんんんんんんん
何はともあれ、ググります。
みっけた。
ん〜〜〜やはりバーチャルホスト周りっぽい。 というかpythonのバージョンが2.7.9以上であれば問題ないんか。コレ。
解決策としてStack Overflowへのリンクが貼ってありますね。こういうこともあるのね。初めて見た。
pip install pyOpenSSLで詰む pyOpenSSLとidnaをインストールしてあげるとよいよってあるのでやってみました。
idnaはすっきり入ってくれたのですがpyOpenSSLが上手くいかない。。(すでに入っていたためバージョンをあげています。)
$ pip install pyOpenSSL --upgrade .....前略..... 1 warning and 20 errors generated.</description>
    </item>
    
    <item>
      <title>pythonの参照渡しをどうすれば回避できるのか</title>
      <link>https://pyonk.github.io/blog/post/python-copy/</link>
      <pubDate>Thu, 12 Jan 2017 18:21:36 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/python-copy/</guid>
      <description>ときたまpythonを書いているとこれって値渡しなんだっけ、参照渡しなんだっけと分からなくなります。 たとえば
hoge={1:1,2:2,3:3}printid(hoge)# 140418104920496fuga=hogeprintid(fuga)# 140418104920496fuga.update({4:4})printhoge==fuga# True  Pythonistなら常識ですよね。
どうすれば回避できるのか 割と単純です。
hoge={1:1,2:2,3:3}printid(hoge)# 140418104920496fuga=hoge.copy()printid(fuga)# 140418107009728fuga.update({4:4})printhoge==fuga# Falseprinthoge# {1:1, 2:2, 3:3}printfuga# {1:1, 2:2, 3:3, 4:4}  辞書の浅いコピーを取るにはcopy_dict = dict.copy()が簡単ですね。
ちなみに、リストの場合はcopy_list = original_list[:]でコピーが取れます。
ただこれだと浅いコピーになります。
なので
hoge={1:{2:2,3:3}}printid(hoge)# 140418104920496fuga=hoge.copy()printid(fuga)# 140418107009728fuga[1].update({4:4})printhoge==fuga# Trueprinthoge# {1: {2: 2, 3: 3, 4: 4}}printfuga# {1: {2: 2, 3: 3, 4: 4}}  となってしまいます。
浅いコピーの場合は
 元のオブジェクト中に見つかったオブジェクトに対する 参照 を挿入  するようです。
深いコピー 上記の通り、オブジェクトの中のオブジェクトは参照渡しになります。
それを回避するために、copyモジュールをimportして、深いコピーを利用します。
importcopyhoge={1:{2:2,3:3}}printid(hoge)# 140418104920496fuga=copy.deepcopy(hoge)printid(fuga)# 140418107009728fuga[1].update({4:4})printhoge==fuga# Falseprinthoge# {1: {2: 2, 3: 3}}printfuga# {1: {2: 2, 3: 3, 4: 4}}  あら素敵。</description>
    </item>
    
    <item>
      <title>Djangoでどうしても非同期でコマンドを実行したくなった</title>
      <link>https://pyonk.github.io/blog/post/use-celery-for-send-email-django/</link>
      <pubDate>Fri, 06 Jan 2017 12:05:29 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/use-celery-for-send-email-django/</guid>
      <description>経緯 あるサイトで、顧客に新情報をメールでお知らせしたいときに、今まではコマンド叩いて送信していたのですが、結構面倒なのでブラウザからできないものかと試行錯誤していたのです。
コマンドの設計見直せっていうのは今回は置いといてください・・・。
どうしたのか いくつかの方法を試しました。
pythonからコマンドを叩く まず思い浮かんだのがコマンドをnohup &amp;amp;でpythonから叩く。
import subprocess import shlex cmd = &#39;nohup sleep 10 &amp;amp;&#39; subprocess.Popen(cmd)  が！！！ レスポンスが帰ってくるのは10秒後・・・。
つぎ！
thread化して逃げる この前書いたような感じです。
pythonでtupleをつくる - わいがかいた
結局、レスポンスが帰ってくるのは10秒後・・・。 ここ工夫するとどうにかなるような気もする。
つぎ！！
celeryを使う Celery - Distributed Task Queue — Celery 4.0.2 documentation
ようやく本題。
ググり始めた当初から名前を見かけてはいましたが敷居が高そうなのでスルーしてました。
実際やりはじめて少し後悔しましたし。
結構面倒くさかったので備忘録代わりに。
install まずは本体をインストールしていきます。
pip install -U Celery
celeryはbrokerとして * Redis * RabbitMQ * Amazon SQS
などを使うことができます。 今回はRedisを選択しました。
yum install redis
bundleも用意されているのでそれも。
pip install -U &amp;quot;celery[redis]&amp;quot;</description>
    </item>
    
    <item>
      <title>pythonでtupleをつくる</title>
      <link>https://pyonk.github.io/blog/post/python-tuple/</link>
      <pubDate>Thu, 05 Jan 2017 15:05:43 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/python-tuple/</guid>
      <description>pythonのthreadで引数を渡したい Djangoで時間のかかる処理をスレッド化して逃げようとしたのですがうまくいかなかったのでメモ。
threading.Threadにはいくつか引数が渡せます。
 group target name args kwargs  詳しくはここで。
で、スレッド化したい処理に引数を渡そうと思って下記のように実装しました。
def command_execute(cmd): print cmd # (&#39;s&#39;, &#39;l&#39;, &#39;e&#39;, &#39;e&#39;, &#39;p&#39;, &#39; &#39;, &#39;1&#39;, &#39;0&#39;, &#39;;&#39;, &#39;e&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39; &#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;) subprocess.Popen(cmd, shell=True) return cmd = &#39;sleep 10;echo aaa&#39; t = threading.Thread(target=command_execute, args=(cmd)) t.daemon = True t.start()  すると、printされた文字列が (&#39;s&#39;, &#39;l&#39;, &#39;e&#39;, &#39;e&#39;, &#39;p&#39;, &#39; &#39;, &#39;1&#39;, &#39;0&#39;, &#39;;&#39;, &#39;e&#39;, &#39;c&#39;, &#39;h&#39;, &#39;o&#39;, &#39; &#39;, &#39;a&#39;, &#39;a&#39;, &#39;a&#39;) となるわけです。 何が起きてるんだ状態です。</description>
    </item>
    
    <item>
      <title>nginxのimage_filterを使って画像を動的に縮小するには</title>
      <link>https://pyonk.github.io/blog/post/nginx-image-filter/</link>
      <pubDate>Fri, 15 Jul 2016 15:28:45 +0900</pubDate>
      
      <guid>https://pyonk.github.io/blog/post/nginx-image-filter/</guid>
      <description>image_filterを使えるようにモジュールを指定する nginxをソースからインストールする際に--with-http_image_filter_moduleをつけてインストールします。
$ wget http://nginx.org/download/nginx-1.10.1.tar.gz $ tar -xvzf nginx-1.10.1.tar.gz $ cdnginx-1.10.1 $ ./configure --with-http_image_filter_module $ make $ sudo make install  ほかのオプションモジュールをつける場合は随時つけてください。
すでにnginxがインストールされている場合は、
$ sudo cp objs/nginx /usr/sbin/nginx $ cat /var/run/nginx.pid 10576$ sudo kill-USR2 10576$ sudo kill-WINCH 10576$ sudo kill-QUIT 10576  とすると今までの古いnginxのワーカープロセス、マスタープロセスをkillして、新しいnginxのマスタープロセス、ワーカープロセスが稼働するようになります。
confを変更 image_filterを加えます。 くわしいことはここをみてください。
location ~ /image/(.*\.png)$ { alias /path/to/image/$1; image_filter resize 100 -; # 横幅100pxでリサイズする }  とりあえず、これで/image配下のpngファイルはリサイズされて表示されるはずです。</description>
    </item>
    
  </channel>
</rss>