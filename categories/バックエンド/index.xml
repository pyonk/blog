<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>バックエンド on わいがかいた</title><link>https://pyonk.github.io/blog/categories/%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89/</link><description>Recent content in バックエンド on わいがかいた</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 20 Dec 2017 13:54:50 +0900</lastBuildDate><atom:link href="https://pyonk.github.io/blog/categories/%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89/index.xml" rel="self" type="application/rss+xml"/><item><title>facebookのためにsocial loginをごにょごにょした話</title><link>https://pyonk.github.io/blog/posts/social-login-update-for-facebook/</link><pubDate>Wed, 20 Dec 2017 13:54:50 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/social-login-update-for-facebook/</guid><description>
facebookがRedirect URIsのために Strict Modeを使ってほしそうにしている</description></item><item><title>djangoのquerysetを任意の順番でsortする</title><link>https://pyonk.github.io/blog/posts/django-queryset-order-by-specific-values/</link><pubDate>Fri, 10 Nov 2017 18:33:41 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/django-queryset-order-by-specific-values/</guid><description>
djangoのquerysetを任意の順番でsortする # djnagoではorder_by('hoge')とするとhogeの昇順でならんでいくことは当たり前のように知っているよね。
が、ぼくがやりたかったのは、任意の値でのソート。
databaseに定義されてない値でソートしたかったのです。
とても参考になったstack overflowはこちら。
Django order_by specific order - Stack Overflow
ただしdjango &amp;gt;= 1.8です
TL;DR # from djnago.db.models import Case, When, Value, FloatField # { pid: specific_value, } specific_values = { &amp;#39;1&amp;#39;: 100.0, &amp;#39;2&amp;#39;: 50.0, &amp;#39;3&amp;#39;: 25.0, &amp;#39;4&amp;#39;: 123.4, &amp;#39;5&amp;#39;: 599.33, } # sqlのCASE式にしたい条件のリスト cases = [] # casesにCASE式にしたい条件をつめていく for pid, specific_value in specific_values.items(): cases.append(When(id=pid, then=Value(specific_value))) # Hogeモデルに対して、pidで絞り込んだあとにcasesをつかってspecific_valueについて注釈づけてorder_byする Hoge.objects.filter(id__in=specific_values.keys()).annotate(specific_value=Case( *cases, output_field=FloatField() )).order_by(specific_value) 詳しい説明 # Conditional Expressions | Django documentation | Django</description></item><item><title>pythonからpdfのフォームに入力する</title><link>https://pyonk.github.io/blog/posts/fill-pdf-form-from-python/</link><pubDate>Thu, 05 Oct 2017 15:46:45 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/fill-pdf-form-from-python/</guid><description>
pythonからpdfのフォームに入力する（厳密には違う） # pythonでpdfのフォームに値を入力していく機能をつくりました。
そもそもpdfにフォームなんて埋められるんだって知らなかったです。
どうやら読み込み専用フォームとそうでないフォームがあるみたいです。
書き込めるフォームであってもフォントの指定や色付けとかが難しそうだったので、フォームに入力しない形式で実装しました。
なのでどちらにも対応できるような感じになってます。
事前準備 # reportlab $ pip install reportlab PyPDF2 $ pip install pypdf2 コード # #! /usr/bin/python # -*- coding: utf-8 -*- from reportlab.pdfgen import canvas from reportlab.lib.pagesizes import A4 from reportlab.pdfbase import pdfmetrics from reportlab.pdfbase.ttfonts import TTFont from PyPDF2.pdf import PdfFileReader, PdfFileWriter from io import BytesIO title = &amp;#39;title&amp;#39; # fontを変更 pdfmetrics.registerFont(TTFont(&amp;#39;Mplus1p-Light&amp;#39;, &amp;#39;static/font/Mplus1p/Mplus1p-Light.ttf&amp;#39;)) template_path = &amp;#39;template.pdf&amp;#39; # 読み込み reader = PdfFileReader(template_path) existing_page = reader.</description></item><item><title>crontab -e と /etc/crontab の違い</title><link>https://pyonk.github.io/blog/posts/difference-of-crontabe-and-etc-crontab/</link><pubDate>Mon, 06 Feb 2017 12:28:58 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/difference-of-crontabe-and-etc-crontab/</guid><description>
ふとした拍子にcronのログを見ていたら同じコマンドが実行されていたんですね。
$ less /var/log/cron Feb 6 00:15:01 ip-000-00-00-000 CROND[16356]: (user) CMD (python /home/user/app/manage.py hogehoge) Feb 6 00:15:01 ip-000-00-00-000 CROND[16357]: (user) CMD (user python /home/user/app/manage.py hogehoge) 追記 # 上記のコマンドの
user python /home/user/app/manage.py hogehoge
この部分、おかしいですね〜〜
/etc/crontabの内容を何も考えずにコピーしちゃいました。
/etc/crontabはユーザーを指定して記述するのに対して、crontab -eの場合はユーザーはログインユーザーとなるのでユーザーの記述はいらんのですね。猛省。
おかしいな〜おかしいな〜〜〜〜〜 # こわいな〜こわいな〜〜〜〜。
何て思っていたんですが、そういえばcronの設定を二回したような気がしてきたので確かめてみました。
/etc/crontab # まず初めにcronを設定したときはこのこをいじっていました。
$ sudo vim /etc/crontab ですね。
crontab -e # 何を思ったのかこっちでも設定していたような気がしました。
$ crontab -l で確認することができます。
案の定同じコマンドが同じ時間で実行されるように設定されておりました。
この二つの違いはなんなんでしょうか # こちらがわかりやすいかと思います。
要するに、 /etc/crontabは他のユーザーのcronもまとめて設定できるようなのですね。
たとえば
* * * * * user echo &amp;#39;fugafuga&amp;#39; * * * * * user2 echo &amp;#39;hogehoge&amp;#39; のような感じです。</description></item><item><title>あ！ やせいの requests.exceptions.SSLErrorが とびだしてきた！</title><link>https://pyonk.github.io/blog/posts/cannot-request/</link><pubDate>Thu, 02 Feb 2017 18:40:16 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/cannot-request/</guid><description>
あ！ やせいの requests.exceptions.SSLErrorが とびだしてきた！ pyonk は どうする？</description></item><item><title>pythonの参照渡しをどうすれば回避できるのか</title><link>https://pyonk.github.io/blog/posts/python-copy/</link><pubDate>Thu, 12 Jan 2017 18:21:36 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/python-copy/</guid><description>
ときたまpythonを書いているとこれって値渡しなんだっけ、参照渡しなんだっけと分からなくなります。 たとえば
hoge = {1:1, 2:2, 3:3} print id(hoge) # 140418104920496 fuga = hoge print id(fuga) # 140418104920496 fuga.update({ 4:4 }) print hoge == fuga # True Pythonistなら常識ですよね。
どうすれば回避できるのか # 割と単純です。
hoge = {1:1, 2:2, 3:3} print id(hoge) # 140418104920496 fuga = hoge.copy() print id(fuga) # 140418107009728 fuga.update({ 4:4 }) print hoge == fuga # False print hoge # {1:1, 2:2, 3:3} print fuga # {1:1, 2:2, 3:3, 4:4} 辞書の浅いコピーを取るにはcopy_dict = dict.</description></item><item><title>Djangoでどうしても非同期でコマンドを実行したくなった</title><link>https://pyonk.github.io/blog/posts/use-celery-for-send-email-django/</link><pubDate>Fri, 06 Jan 2017 12:05:29 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/use-celery-for-send-email-django/</guid><description>
経緯 # あるサイトで、顧客に新情報をメールでお知らせしたいときに、今まではコマンド叩いて送信していたのですが、結構面倒なのでブラウザからできないものかと試行錯誤していたのです。
コマンドの設計見直せっていうのは今回は置いといてください・・・。
どうしたのか # いくつかの方法を試しました。
pythonからコマンドを叩く # まず思い浮かんだのがコマンドをnohup &amp;amp;でpythonから叩く。
import subprocess import shlex cmd = &amp;#39;nohup sleep 10 &amp;amp;&amp;#39; subprocess.Popen(cmd) が！！！ レスポンスが帰ってくるのは10秒後・・・。
つぎ！
thread化して逃げる # この前書いたような感じです。
pythonでtupleをつくる - わいがかいた
結局、レスポンスが帰ってくるのは10秒後・・・。 ここ工夫するとどうにかなるような気もする。
つぎ！！
celeryを使う # Celery - Distributed Task Queue — Celery 4.0.2 documentation
ようやく本題。
ググり始めた当初から名前を見かけてはいましたが敷居が高そうなのでスルーしてました。
実際やりはじめて少し後悔しましたし。
結構面倒くさかったので備忘録代わりに。
install # まずは本体をインストールしていきます。
pip install -U Celery
celeryはbrokerとして
Redis RabbitMQ Amazon SQS などを使うことができます。 今回はRedisを選択しました。
yum install redis
bundleも用意されているのでそれも。
pip install -U &amp;quot;celery[redis]&amp;quot;</description></item><item><title>pythonでtupleをつくる</title><link>https://pyonk.github.io/blog/posts/python-tuple/</link><pubDate>Thu, 05 Jan 2017 15:05:43 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/python-tuple/</guid><description>
pythonでtupleを作るときにはまったこと</description></item><item><title>nginxのimage_filterを使って画像を動的に縮小するには</title><link>https://pyonk.github.io/blog/posts/nginx-image-filter/</link><pubDate>Fri, 15 Jul 2016 15:28:45 +0900</pubDate><guid>https://pyonk.github.io/blog/posts/nginx-image-filter/</guid><description>
nginxのimage_filterを使って画像を縮小します。まず、ソースからnginxをインストールします。</description></item></channel></rss>